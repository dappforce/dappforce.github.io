"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[49],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>u});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=n.createContext({}),p=function(e){var t=n.useContext(a),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},l=function(e){var t=p(e.components);return n.createElement(a.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(o),u=r,f=m["".concat(a,".").concat(u)]||m[u]||d[u]||s;return o?n.createElement(f,c(c({ref:t},l),{},{components:o})):n.createElement(f,c({ref:t},l))}));function u(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=o.length,c=new Array(s);c[0]=m;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<s;p++)c[p]=o[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},3336:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=o(3117),r=(o(7294),o(3905));const s={id:"fetch-comments",title:"Fetch Comments",displayed_sidebar:"developSidebar"},c=void 0,i={unversionedId:"develop/how-to-guides/comments/fetch-comments",id:"develop/how-to-guides/comments/fetch-comments",title:"Fetch Comments",description:"This section covers how to fetch comments on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/comments/FetchComments.md",sourceDirName:"develop/how-to-guides/comments",slug:"/develop/how-to-guides/comments/fetch-comments",permalink:"/docs/develop/how-to-guides/comments/fetch-comments",draft:!1,editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/comments/FetchComments.md",tags:[],version:"current",frontMatter:{id:"fetch-comments",title:"Fetch Comments",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Create and update Posts",permalink:"/docs/develop/how-to-guides/posts/create-posts"},next:{title:"Create And Update Comments",permalink:"/docs/develop/how-to-guides/comments/create-comments"}},a={},p=[{value:"Get replies",id:"get-replies",level:2}],l={toc:p};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This section covers how to fetch comments on the Subsocial blockchain.")),(0,r.kt)("p",null,"Comments on the Subsocial blockchain are technically a type of post classified as Extensions. You can read more about it ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/posts/create-posts"},"here"),". "),(0,r.kt)("h2",{id:"get-replies"},"Get replies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"api.blockchain.getReplyIdsByPostId(id: AnyPostId): Promise<PostId[]>\n")),(0,r.kt)("p",null,"Example: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { idToBn } from \"@subsocial/utils\"\n\n// Get reply ids (comments) by parent post id and fetch posts by ids\nconst replyIds = await api.blockchain.getReplyIdsByPostId(idToBn('1'))\n\n// For getting comments use posts functions\nconst replies = await api.findPublicPosts(replyIds)\n")))}d.isMDXComponent=!0}}]);