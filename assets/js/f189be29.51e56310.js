"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[8729],{5680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>y});var n=t(6540);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=n.createContext({}),i=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=i(e.components);return n.createElement(c.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=i(t),g=s,y=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return t?n.createElement(y,l(l({ref:a},p),{},{components:t})):n.createElement(y,l({ref:a},p))}));function y(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var o=t.length,l=new Array(o);l[0]=g;var r={};for(var c in a)hasOwnProperty.call(a,c)&&(r[c]=a[c]);r.originalType=e,r[u]="string"==typeof e?e:s,l[1]=r;for(var i=2;i<o;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9365:(e,a,t)=>{t.d(a,{A:()=>l});var n=t(6540),s=t(53);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:a,hidden:t,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,l),hidden:t},a)}},1470:(e,a,t)=>{t.d(a,{A:()=>I});var n=t(8168),s=t(6540),o=t(53),l=t(3104),r=t(6347),c=t(7485),i=t(1682),p=t(9466);function u(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:s}}=e;return{value:a,label:t,attributes:n,default:s}}))}function d(e){const{values:a,children:t}=e;return(0,s.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,i.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function g(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function y(e){let{queryString:a=!1,groupId:t}=e;const n=(0,r.W6)(),o=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,c.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(n.location.search);a.set(o,e),n.replace({...n.location,search:a.toString()})}),[o,n])]}function m(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,o=d(e),[l,r]=(0,s.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!g({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:o}))),[c,i]=y({queryString:t,groupId:n}),[u,m]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,o]=(0,p.Dv)(t);return[n,(0,s.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:n}),f=(()=>{const e=c??u;return g({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{f&&r(f)}),[f]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),i(e),m(e)}),[i,m,o]),tabValues:o}}var f=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:a,block:t,selectedValue:r,selectValue:c,tabValues:i}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),d=e=>{const a=e.currentTarget,t=p.indexOf(a),n=i[t].value;n!==r&&(u(a),c(n))},g=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;a=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;a=p[t]??p[p.length-1];break}}a?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},a)},i.map((e=>{let{value:a,label:t,attributes:l}=e;return s.createElement("li",(0,n.A)({role:"tab",tabIndex:r===a?0:-1,"aria-selected":r===a,key:a,ref:e=>p.push(e),onKeyDown:g,onClick:d},l,{className:(0,o.A)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":r===a})}),t??a)})))}function v(e){let{lazy:a,children:t,selectedValue:n}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=o.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function w(e){const a=m(e);return s.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},s.createElement(h,(0,n.A)({},e,a)),s.createElement(v,(0,n.A)({},e,a)))}function I(e){const a=(0,f.A)();return s.createElement(w,(0,n.A)({key:String(a)},e))}},5970:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var n=t(8168),s=(t(6540),t(5680)),o=t(1470),l=t(9365);const r={id:"sdk-cheatsheet",title:"SDK Cheatsheet",description:"Explore the most commonly used code snippets from the Subsocial JS SDK for connecting with the blockchain for reading & writing data from the chain.",keywords:["SDK Cheatsheet","Web3 Social","Blockchain","Subsocial"],displayed_sidebar:"developSidebar"},c=void 0,i={unversionedId:"develop/sdk-cheatsheet",id:"develop/sdk-cheatsheet",title:"SDK Cheatsheet",description:"Explore the most commonly used code snippets from the Subsocial JS SDK for connecting with the blockchain for reading & writing data from the chain.",source:"@site/docs/develop/SDKCheatsheet.md",sourceDirName:"develop",slug:"/develop/sdk-cheatsheet",permalink:"/docs/develop/sdk-cheatsheet",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/SDKCheatsheet.md",tags:[],version:"current",frontMatter:{id:"sdk-cheatsheet",title:"SDK Cheatsheet",description:"Explore the most commonly used code snippets from the Subsocial JS SDK for connecting with the blockchain for reading & writing data from the chain.",keywords:["SDK Cheatsheet","Web3 Social","Blockchain","Subsocial"],displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"QuickStart",permalink:"/docs/develop/developer-quickstart"},next:{title:"Playground",permalink:"/docs/develop/playground"}},p={},u=[{value:"Setup",id:"setup",level:2},{value:"Install",id:"install",level:3},{value:"Import",id:"import",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Signing and sending transactions",id:"signing-and-sending-transactions",level:2},{value:"Reading Data",id:"reading-data",level:2},{value:"Space",id:"space",level:3},{value:"Post",id:"post",level:3},{value:"Profile",id:"profile",level:3},{value:"Writing Data",id:"writing-data",level:2},{value:"Note",id:"note",level:3},{value:"Space",id:"space-1",level:3},{value:"Post",id:"post-1",level:3},{value:"Profile",id:"profile-1",level:3},{value:"Comments",id:"comments",level:2},{value:"Reading Comments",id:"reading-comments",level:3},{value:"Writing Comments",id:"writing-comments",level:3},{value:"Follows",id:"follows",level:2},{value:"Check if follower",id:"check-if-follower",level:3},{value:"Fetch list of followers",id:"fetch-list-of-followers",level:3},{value:"For Spaces",id:"for-spaces",level:4},{value:"For Accounts",id:"for-accounts",level:4},{value:"Follow / Unfollow",id:"follow--unfollow",level:3},{value:"For Spaces",id:"for-spaces-1",level:4},{value:"For Accounts",id:"for-accounts-1",level:4},{value:"Reactions",id:"reactions",level:2},{value:"Get all reactions",id:"get-all-reactions",level:3},{value:"Reacting to a post",id:"reacting-to-a-post",level:3}],d={toc:u},g="wrapper";function y(e){let{components:a,...t}=e;return(0,s.yg)(g,(0,n.A)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,s.yg)("head",null,(0,s.yg)("title",null,"Subsocial SDK Cheatsheet - A Quick Reference Guide")),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"Here is a collection of the most commonly used methods within Subsocial SDK. For more in-depth look into this library, please reference the ",(0,s.yg)("a",{parentName:"p",href:"https://js-sdk-api.subsocial.network/"},"TypeDocs"),".")),(0,s.yg)("h2",{id:"setup"},"Setup"),(0,s.yg)("h3",{id:"install"},"Install"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @subsocial/api\n")),(0,s.yg)("p",null,"Add utils library:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @subsocial/utils\n")),(0,s.yg)("h3",{id:"import"},"Import"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},'import { SubsocialApi } from "@subsocial/api";\n')),(0,s.yg)("h3",{id:"configuration"},"Configuration"),(0,s.yg)(o.A,{defaultValue:"testnet",values:[{label:"TestNet",value:"testnet"},{label:"MainNet",value:"mainnet"},{label:"xSocial",value:"xsocial"},{label:"LocalNet",value:"localnet"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"mainnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://para.f3joule.space",\n  ipfsNodeUrl: "https://ipfs.subsocial.network",\n};\n')),(0,s.yg)("p",null,"Read more about Subsocial mainnet ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/mainnet"},"here"),".")),(0,s.yg)(l.A,{value:"testnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://rco-para.subsocial.network",\n  ipfsNodeUrl: "https://gw.crustfiles.app",\n};\n')),(0,s.yg)("p",null,"Read more about Subsocial testnet ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/testnet"},"here"),".")),(0,s.yg)(l.A,{value:"xsocial",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://xsocial.subsocial.network",\n  ipfsNodeUrl: "https://gw.crustfiles.app",\n};\n')),(0,s.yg)("p",null,"Read more about xSocial chain ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/xSocial"},"here"),".")),(0,s.yg)(l.A,{value:"localnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "http://127.0.0.1:9944",\n  ipfsNodeUrl: "http://127.0.0.1:8080",\n};\n')),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Make sure to run local Subsocial & IPFS node before using these configs in your project.")))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"const api = await SubsocialApi.create(config);\n")),(0,s.yg)("h2",{id:"signing-and-sending-transactions"},"Signing and sending transactions"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Keyring } from "@polkadot/keyring";\n\nconst keyring = new Keyring({ type: "sr25519" });\nconst accountPair = keyring.addFromMnemonic("add your mnemonic here");\n\ntx.signAndSend(accountPair, async (result) => {\n  const { status } = result;\n\n  if (!result || !status) {\n    return;\n  }\n\n  if (status.isFinalized || status.isInBlock) {\n    const blockHash = status.isFinalized\n      ? status.asFinalized\n      : status.asInBlock;\n\n    console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n  } else if (result.isError) {\n    console.log(JSON.stringify(result));\n  } else {\n    console.log(`\u23f1 Current tx status: ${status.type}`);\n  }\n});\n')),(0,s.yg)("p",null,"Read more about signing & sending transactions ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"here"),"."),(0,s.yg)("h2",{id:"reading-data"},"Reading Data"),(0,s.yg)("h3",{id:"space"},"Space"),(0,s.yg)("p",null,"Space is the place where all content on SubSocial lives. It holds multiple posts from different people depending upon the permission. ",(0,s.yg)("a",{parentName:"p",href:"/docs/basics/glossary/overview#spaces"},"Read More")),(0,s.yg)(o.A,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Owner",value:"owner"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"byid",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const spaceId = 1;\nconst space = await api.findSpace({ id: spaceId });\n"))),(0,s.yg)(l.A,{value:"owner",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const ownerAccountId = "<owner_account_public_key>";\n\n// Fetching ids of all the spaces by owner.\nconst spaceIds = await api.blockchain.spaceIdsByOwner(ownerAccountId);\n\n// Fetching space data from all ids.\nconst spaces = await api.base.findSpaces({ ids: spaceIds });\n')))),(0,s.yg)("p",null,"Check full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/spaces/fetch-spaces"},"here"),"."),(0,s.yg)("h3",{id:"post"},"Post"),(0,s.yg)("p",null,"Post is the piece of content that provides value for the readers. It can be some written text, an image, or a video. ",(0,s.yg)("a",{parentName:"p",href:"/docs/basics/glossary/overview#posts"},"Read More")),(0,s.yg)(o.A,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Space Id",value:"byspaceid"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"byid",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const postId = 1;\nconst post = await api.findPost({ id: postId });\n"))),(0,s.yg)(l.A,{value:"byspaceid",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const spaceId = 1;\nconst postIds = await api.blockchain.postIdsBySpaceId(spaceId);\n\nconst posts = await api.base.findPosts({ ids: postIds });\n")))),(0,s.yg)("p",null,"Check full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/posts/fetch-posts"},"here"),"."),(0,s.yg)("h3",{id:"profile"},"Profile"),(0,s.yg)("p",null,"Profile is linked to your Subsocial account address, and is an overview of your activity on Subsocial. You can set a profile picture and a username for your account, as well as a personal website link.\n",(0,s.yg)("a",{parentName:"p",href:"/docs/basics/glossary/overview#profile"},"Read More")),(0,s.yg)(o.A,{defaultValue:"singleprofile",values:[{label:"Single Account",value:"singleprofile"},{label:"Multiple Accounts",value:"multipleprofiles"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"singleprofile",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<account_public_key>";\nconst profile = await api.base.findProfileSpace(accountId);\n'))),(0,s.yg)(l.A,{value:"multipleprofiles",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountIds = ["<account_public_key_1>", "<account_public_key_2>"];\nconst profiles = await api.base.findProfileSpaces(accountIds);\n')))),(0,s.yg)("p",null,"Check full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/profiles/fetch-profiles"},"here"),"."),(0,s.yg)("h2",{id:"writing-data"},"Writing Data"),(0,s.yg)("h3",{id:"note"},"Note"),(0,s.yg)("p",null,"To store data on IPFS, it is necessary to set up a CRUST IPFS account and push the data from your account. "),(0,s.yg)("p",null,"You set authHeader and setup with Subsocial SDK like this:"),(0,s.yg)("blockquote",null,(0,s.yg)("p",{parentName:"blockquote"},"This is only required for the Testnet. On the Mainnet, this will not work.")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const authHeader = 'c3ViLTVGQTluUURWZzI2N0RFZDhtMVp5cFhMQm52TjdTRnhZd1Y3bmRxU1lHaU45VFRwdToweDEwMmQ3ZmJhYWQwZGUwNzFjNDFmM2NjYzQzYmQ0NzIxNzFkZGFiYWM0MzEzZTc5YTY3ZWExOWM0OWFlNjgyZjY0YWUxMmRlY2YyNzhjNTEwZGY4YzZjZTZhYzdlZTEwNzY2N2YzYTBjZjM5OGUxN2VhMzAyMmRkNmEyYjc1OTBi';\n\napi.ipfs.setWriteHeaders({\n  authorization: \"Basic \" + authHeader,\n});\n")),(0,s.yg)("h3",{id:"space-1"},"Space"),(0,s.yg)("p",null,"Add following import statement:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent, OptionBool } from "@subsocial/api/substrate/wrappers";\n')),(0,s.yg)("p",null,"Storing space details in IPFS, and generating a CID."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\n\nconst cid = await ipfs.saveContent({\n  about:\n    "Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS",\n  image: ipfsImageCid,\n  name: "Subsocial",\n  tags: ["subsocial"],\n});\n')),(0,s.yg)("p",null,"Creating a Space transaction object"),(0,s.yg)(o.A,{defaultValue:"create",values:[{label:"Create Space",value:"create"},{label:"Update Space",value:"update"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"create",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const substrateApi = await api.substrateApi;\nconst spaceTransaction = substrateApi.tx.spaces.createSpace(\n  IpfsContent(cid),\n  null // Permissions config (optional)\n);\n"))),(0,s.yg)(l.A,{value:"update",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const substrateApi = await api.substrateApi;\nconst update = {\n  content: IpfsContent(cid),\n  hidden: new OptionBool(true),\n};\n\nconst spaceTransaction = substrateApi.tx.spaces.updateSpace("1", update);\n')))),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/spaces/create-spaces"},"here"),"."),(0,s.yg)("h3",{id:"post-1"},"Post"),(0,s.yg)("p",null,"Add following import statement:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent, OptionBool } from "@subsocial/api/substrate/wrappers";\n')),(0,s.yg)("p",null,"Storing post details in IPFS, and generating a CID."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\n\nconst cid = await ipfs.saveContent({\n  title: "What is Subsocial?",\n  image: ipfsImageCid,\n  tags: ["Hello world", "FAQ"],\n  body: "Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.",\n});\n')),(0,s.yg)("p",null,"Creating a post transaction object"),(0,s.yg)(o.A,{defaultValue:"regular",values:[{label:"Regular Post",value:"regular"},{label:"Shared Post",value:"shared"},{label:"Update Post",value:"update"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"regular",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1"; // The space in which you\'re posting.\nconst substrateApi = await api.substrateApi;\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId,\n  { RegularPost: null }, // Creates a regular post.\n  IpfsContent(cid)\n);\n'))),(0,s.yg)(l.A,{value:"shared",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1"; // The space in which you\'re posting.\nconst parentPostId = "2"; // The original post you want to share.\n\n// Creating new sharedPostCid having shared message.\nconst sharedPostCid = await ipfs.saveContent({\n  body: "Keep up the good work!",\n});\n\nconst substrateApi = await api.substrateApi;\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId,\n  { SharedPost: parentPostId }, // Creates a shared post.\n  IpfsContent(sharedPostCid)\n);\n'))),(0,s.yg)(l.A,{value:"update",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const postId = "7"; // Id of post which you want to update.\nconst substrateApi = await api.substrateApi;\n\nconst update = {\n  content: IpfsContent(cid),\n  hidden: new OptionBool(true),\n};\n\nconst postTransaction = substrateApi.tx.posts.updatePost(postId, update);\n')))),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/posts/create-posts"},"here"),"."),(0,s.yg)("h3",{id:"profile-1"},"Profile"),(0,s.yg)("p",null,"Add the following import statement:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n')),(0,s.yg)("p",null,"Storing profile details in IPFS, and generating a CID to add on blockchain:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\nconst cid = await ipfs.saveContent({\n  about: "Subsocial official account.",\n  avatar: ipfsImageCid,\n  name: "Subsocial",\n});\n')),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"Profiles in Subsocial is a simple space with it's Id marked on the blockchain to represent as profile.")),(0,s.yg)("p",null,"Now, create a new space as mentioned ",(0,s.yg)("a",{parentName:"p",href:"http://docs.subsocial.network/docs/develop/sdk-cheatsheet#space-1"},"here"),", so we can mark it as a profile."),(0,s.yg)("p",null,"Creating a profile object:"),(0,s.yg)(o.A,{defaultValue:"createprofile",values:[{label:"Create Profile",value:"createprofile"},{label:"Reset Profile",value:"updateprofile"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"createprofile",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const substrateApi = await api.substrateApi;\n\nconst spaceId = 3232; // The Id of space you want to mark as profile.\nconst profileTransaction = substrateApi.tx.profiles.setProfile(spaceId);\n"))),(0,s.yg)(l.A,{value:"updateprofile",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"const profileTransaction = substrateApi.tx.profiles.resetProfile();\n")))),(0,s.yg)("blockquote",null,(0,s.yg)("p",{parentName:"blockquote"},"To change profile data, update the profile space from it's id.")),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/profiles/create-profiles"},"here"),"."),(0,s.yg)("h2",{id:"comments"},"Comments"),(0,s.yg)("p",null,"Comments are replies to a post that are visible below a post."),(0,s.yg)("h3",{id:"reading-comments"},"Reading Comments"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { idToBn } from "@subsocial/utils";\n\nconst postId = "1";\n\n// Get reply ids (comments) by parent post id and fetch posts by ids\nconst replyIds = await api.blockchain.getReplyIdsByPostId(idToBn(postId));\n\n// For getting comments use posts functions\nconst replies = await api.findPublicPosts(replyIds);\n')),(0,s.yg)("h3",{id:"writing-comments"},"Writing Comments"),(0,s.yg)(o.A,{defaultValue:"commentToPost",values:[{label:"Create",value:"commentToPost"},{label:"Update",value:"replyToComment"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"commentToPost",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n\nconst spaceId = "1"; // Optional.\nconst rootPostId = "1";\nconst cid = await ipfs.saveContent({\n  body: "Keep up the good work!",\n});\n\nconst substrateApi = await api.substrateApi;\n\nconst tx = substrateApi.tx.posts.createPost(\n  spaceId,\n  { Comment: { parentId: null, rootPostId } },\n  IpfsContent(cid)\n);\n'))),(0,s.yg)(l.A,{value:"replyToComment",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n\nconst spaceId = "1"; // Optional.\nconst parentId = "2"; // Parent comment id.\nconst rootPostId = "1";\nconst cid = await ipfs.saveContent({\n  body: "Agree", // Reply message.\n});\n\nconst substrateApi = await api.substrateApi;\n\nconst tx = substrateApi.tx.posts.createPost(\n  spaceId,\n  { Comment: { parentId, rootPostId } },\n  IpfsContent(cid)\n);\n')))),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/comments/fetch-comments"},"here"),"."),(0,s.yg)("h2",{id:"follows"},"Follows"),(0,s.yg)("h3",{id:"check-if-follower"},"Check if follower"),(0,s.yg)("p",null,"This checks if an account is following a particular space."),(0,s.yg)(o.A,{defaultValue:"isSpaceFollower",values:[{label:"Is Space Follower",value:"isSpaceFollower"},{label:"Is Account Follower",value:"isAccountFollower"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"isSpaceFollower",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst spaceId = "1";\n\nconst isFollower = await api.blockchain.isSpaceFollower(accountId, spaceId);\n'))),(0,s.yg)(l.A,{value:"isAccountFollower",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const yourAccountId = "<any_public_key>";\nconst otherAccountId = "<any_public_key>";\n\nconst isFollower = await api.blockchain.isAccountFollower(\n  yourAccountId,\n  otherAccountId\n);\n')))),(0,s.yg)("h3",{id:"fetch-list-of-followers"},"Fetch list of followers"),(0,s.yg)("h4",{id:"for-spaces"},"For Spaces"),(0,s.yg)(o.A,{defaultValue:"spacefollowers",values:[{label:"By Space Id",value:"spacefollowers"},{label:"Followed by Account Id",value:"replyToComment"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"spacefollowers",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.spaceFollows.spaceFollowers(spaceId);\nconst followersSpaceIds = res;\n'))),(0,s.yg)(l.A,{value:"replyToComment",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.spaceFollows.spacesFollowedByAccount(\n  accountId\n);\nconst followedSpaceIds = res;\n')))),(0,s.yg)("h4",{id:"for-accounts"},"For Accounts"),(0,s.yg)(o.A,{defaultValue:"spacefollowers",values:[{label:"Followers",value:"spacefollowers"},{label:"Following",value:"replyToComment"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"spacefollowers",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.accountFollows.accountFollowers(accountId);\nconst followersOfAccount = res;\n'))),(0,s.yg)(l.A,{value:"replyToComment",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.accountFollows.accountsFollowedByAccount(\n  accountId\n);\nconst followingOfAccount = res;\n')))),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/follow/fetch-follow"},"here"),"."),(0,s.yg)("h3",{id:"follow--unfollow"},"Follow / Unfollow"),(0,s.yg)("h4",{id:"for-spaces-1"},"For Spaces"),(0,s.yg)(o.A,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"spacefollowers",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.spaceFollows.followSpace(spaceId);\n'))),(0,s.yg)(l.A,{value:"replyToComment",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.spaceFollows.unfollowSpace(spaceId);\n')))),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("h4",{id:"for-accounts-1"},"For Accounts"),(0,s.yg)(o.A,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"spacefollowers",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountIdToFollow = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.accountFollows.followAccount(accountIdToFollow);\n'))),(0,s.yg)(l.A,{value:"replyToComment",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const accountIdToFollow = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.accountFollows.followAccount(accountIdToFollow);\n')))),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/follow/create-follow"},"here"),"."),(0,s.yg)("h2",{id:"reactions"},"Reactions"),(0,s.yg)("p",null,"Reactions are your signs to ",(0,s.yg)("inlineCode",{parentName:"p"},"Upvote")," or ",(0,s.yg)("inlineCode",{parentName:"p"},"Downvote")," a post."),(0,s.yg)("h3",{id:"get-all-reactions"},"Get all reactions"),(0,s.yg)(o.A,{defaultValue:"single",values:[{label:"Single Reaction",value:"single"},{label:"Multiple Reactions",value:"multi"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"single",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const myAccount = "<any_account_public_key>";\nconst reaction = await api.blockchain.getPostReactionIdByAccount(\n  myAccount,\n  "1"\n);\n'))),(0,s.yg)(l.A,{value:"multi",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'import { ReactionId } from "@subsocial/api/types/substrate";\n\nconst myAccount = "<any_account_public_key>";\n\nconst substrateApi = await api.substrateApi;\n\nconst tuples = ["1", "2", "3"].map((postId) => [myAccount, postId]);\n\nconst reactionIds =\n  await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples);\nconst reactions = await api.blockchain.findReactions(\n  reactionIds as ReactionId[]\n);\n')))),(0,s.yg)("h3",{id:"reacting-to-a-post"},"Reacting to a post"),(0,s.yg)(o.A,{defaultValue:"createReaction",values:[{label:"Create",value:"createReaction"},{label:"Update",value:"updateReaction"},{label:"Delete",value:"deleteReaction"}],mdxType:"Tabs"},(0,s.yg)(l.A,{value:"createReaction",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id you want to react on.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.createPostReaction(\n  postId,\n  "Upvote"\n);\n'))),(0,s.yg)(l.A,{value:"updateReaction",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id you want to update reaction on.\nconst reactionId = "2"; // Reaction Id to update.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.updatePostReaction(\n  postId,\n  reactionId,\n  "Downvote"\n);\n'))),(0,s.yg)(l.A,{value:"deleteReaction",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id on which reaction you want to delete reaction.\nconst reactionId = "2"; // Reaction Id to delete.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.deletePostReaction(\n  postId,\n  reactionId\n);\n')))),(0,s.yg)("p",null,"Sign and send the transaction, ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/transactions"},"Check Here")),(0,s.yg)("p",null,"Check the full docs ",(0,s.yg)("a",{parentName:"p",href:"/docs/develop/sdk/reactions/create-reactions"},"here"),"."))}y.isMDXComponent=!0}}]);