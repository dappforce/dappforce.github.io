(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var o=n(3),r=n(7),s=(n(0),n(159)),a={id:"intro",title:"Intro"},c={unversionedId:"sdk/quick-start/intro",id:"sdk/quick-start/intro",isDocsHomePage:!1,title:"Intro",description:"Subsocial is a platform that allows anyone to launch their own decentralized censorship-resistant",source:"@site/docs/sdk/quick-start/Intro.md",slug:"/sdk/quick-start/intro",permalink:"/docs/sdk/quick-start/intro",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/Intro.md",version:"current",sidebar:"someSidebar",previous:{title:"The Basics",permalink:"/docs/sdk/overview/thebasics"},next:{title:"How To Connect To Subsocial",permalink:"/docs/sdk/quick-start/connection"}},i=[{value:"Example code",id:"example-code",children:[]}],p={toc:i};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Subsocial is a platform that allows anyone to launch their own decentralized censorship-resistant\nsocial network."),Object(s.b)("h2",{id:"example-code"},"Example code"),Object(s.b)("p",null,"Here we provide some example code for interacting with the Subsocial SDK."),Object(s.b)("p",null,"Start with ",Object(s.b)("a",{parentName:"p",href:"docs/sdk/overview/installation"},"installing @subsocial/api")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"yarn add @subsocial/api\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { newFlatSubsocialApi } from '@subsocial/api'\nimport { bnsToIds, idToBn } from '@subsocial/utils'\n\nconst spaceId = '1'\nconst myAccount = '3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8'\n\nconst example = async () => {\n  const flatApi = await newFlatSubsocialApi({\n    substrateNodeUrl, // http://127.0.0.1:9944\n    offchainUrl,  // http://127.0.0.1:3001\n    ipfsNodeUrl // http://127.0.0.1:8080\n  })\n\n  // get a space id\n  const space = await flatApi.findSpace({id: spaceId})\n\n  // get post ids\n  const postBns = await flatApi.subsocial.substrate.postIdsBySpaceId(idToBn(spaceId))\n  const postIds = bnsToIds(postBns).reverse();\n\n  const substrateApi = await flatApi.subsocial.substrate.api\n\n  // get reactions (upvotes/downvotes) by owner in post ids [use multi request from blockchain]\n  const tuples = postIds.map(postId => [ myAccount, postId ])\n  const reactionIds = await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n  const reactions = await res.subsocial.substrate.findReactions(reactionIds as ReactionId[])\n\n  // get space owner\n  const spaceOwner = await flatApi.findProfile(space.struct.ownerId)\n\n  // get ids of all spaces owned by an account\n  const ownerSpacesBns = await flatApi.subsocial.substrate.spaceIdsByOwner(space.struct.ownerId)\n  const ownerSpacesIds = bnsToIds(ownerSpacesBns)\n\n  // get ids of all posts in the spaces, ids of which were received previously\n  const postIdsPromises = ownerSpacesIds.map(id => flatApi.subsocial.substrate.postIdsBySpaceId(idToBn(id)))\n  const postIdsArray = await Promise.all(postIdsPromises)\n  const postsIds = bnsToIds(postIdsArray.flat().sort((a, b) => b.sub(a).toNumber()))\n}\n")),Object(s.b)("p",null,"Lets explain the example. We first connected to Subsocial using the newFlatSubsocialApi function which\nneeds the substrate node URL, offchain URL and IPFS node URL. After initialization, flatApi can be\nused to retrieve data from the node. We fetched a space and post IDs by the space ID. After that we\nconnected to the substrate API for getting reaction IDs. In the next step, we got a space owner by\nretrieving the ID from the space struct. And finally we fetched owner posts by owner space IDs. "),Object(s.b)("p",null,"You can learn more about these terms below and in ",Object(s.b)("a",{parentName:"p",href:"/docs/glossary/overview"},"Glossary")))}l.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var o=n(0),r=n.n(o);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),b=o,f=u["".concat(a,".").concat(b)]||u[b]||d[b]||s;return n?r.a.createElement(f,c(c({ref:t},p),{},{components:n})):r.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<s;p++)a[p]=n[p];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);