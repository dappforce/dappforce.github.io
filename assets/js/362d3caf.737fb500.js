(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{176:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),m=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=m(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),l=m(n),d=o,u=l["".concat(c,".").concat(d)]||l[d]||b[d]||a;return n?r.a.createElement(u,s(s({ref:t},i),{},{components:n})):r.a.createElement(u,s({ref:t},i))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var i=2;i<a;i++)c[i]=n[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return m}));var o=n(3),r=n(7),a=(n(0),n(176)),c={id:"create-comments",title:"Create And Update Comments",displayed_sidebar:"developSidebar"},s={unversionedId:"develop/how-to-guides/comments/create-comments",id:"develop/how-to-guides/comments/create-comments",isDocsHomePage:!1,title:"Create And Update Comments",description:"This section covers how to create and update comments on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/comments/CreateComments.md",slug:"/develop/how-to-guides/comments/create-comments",permalink:"/docs/develop/how-to-guides/comments/create-comments",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/comments/CreateComments.md",version:"current",sidebar:"developSidebar",previous:{title:"Fetch Comments",permalink:"/docs/develop/how-to-guides/comments/fetch-comments"},next:{title:"Fetch Reactions",permalink:"/docs/develop/how-to-guides/reactions/fetch-reactions"}},p=[{value:"Create a comment",id:"create-a-comment",children:[{value:"Create a comment below a post",id:"create-a-comment-below-a-post",children:[]},{value:"Create a reply to a comment",id:"create-a-reply-to-a-comment",children:[]}]},{value:"Update A Comment",id:"update-a-comment",children:[]}],i={toc:p};function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"This section covers how to create and update comments on the Subsocial blockchain.")),Object(a.b)("h2",{id:"create-a-comment"},"Create a comment"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\n\nconst substrateApi = await api.substrateApi\n\nsubstrateApi.tx.posts.createPost(spaceIdOpt, { \u0421omment }, IpfsContent(\"CID of your content\"))\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(a.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.comment.html"},"Comment")," ")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Properties"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("em",{parentName:"td"},"parentId?")),Object(a.b)("td",{parentName:"tr",align:null},"ID of the post or comment that was replied to.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("em",{parentName:"td"},"rootPostId?")),Object(a.b)("td",{parentName:"tr",align:null},"ID of the original post.")))),Object(a.b)("p",null,"Comments directly under a post will have the same parentId and rootPostId."),Object(a.b)("h3",{id:"create-a-comment-below-a-post"},"Create a comment below a post"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/api/substrate/wrappers\"\n\n...\nconst cid = await api.ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst substrateApi = await api.substrateApi\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: null, rootPostId: '1'}}, IpfsContent(cid))\n\n...\n")),Object(a.b)("h3",{id:"create-a-reply-to-a-comment"},"Create a reply to a comment"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/api/substrate/wrappers\"\n\n...\nconst cid = await api.ipfs.saveContent({\n  body: 'Agree' //replied\n})\n\nconst substrateApi = await api.substrateApi\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: '2', rootPostId: '1'}}, IpfsContent(cid))\n...\n")),Object(a.b)("h2",{id:"update-a-comment"},"Update A Comment"),Object(a.b)("p",null,"For updating comments use ",Object(a.b)("a",{parentName:"p",href:"/docs/develop/how-to-guides/posts/create-posts"},"post methods"),"."))}m.isMDXComponent=!0}}]);