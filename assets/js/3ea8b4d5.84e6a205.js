(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{171:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||c;return n?r.a.createElement(b,i(i({ref:t},p),{},{components:n})):r.a.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,s=new Array(c);s[0]=m;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<c;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return a})),n.d(t,"default",(function(){return l}));var o=n(3),r=n(7),c=(n(0),n(171)),s={id:"fetch-comments",title:"Fetch Comments",displayed_sidebar:"developSidebar"},i={unversionedId:"develop/how-to-guides/comments/fetch-comments",id:"develop/how-to-guides/comments/fetch-comments",isDocsHomePage:!1,title:"Fetch Comments",description:"This section covers how to fetch comments on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/comments/FetchComments.md",slug:"/develop/how-to-guides/comments/fetch-comments",permalink:"/docs/develop/how-to-guides/comments/fetch-comments",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/comments/FetchComments.md",version:"current",sidebar:"developSidebar",previous:{title:"Create and update Posts",permalink:"/docs/develop/how-to-guides/posts/create-posts"},next:{title:"Create And Update Comments",permalink:"/docs/develop/how-to-guides/comments/create-comments"}},a=[{value:"Get replies",id:"get-replies",children:[]}],p={toc:a};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"This section covers how to fetch comments on the Subsocial blockchain.")),Object(c.b)("p",null,"Comments on the Subsocial blockchain are technically a type of post classified as Extensions. You can read more about it ",Object(c.b)("a",{parentName:"p",href:"/docs/develop/how-to-guides/posts/create-posts"},"here"),". "),Object(c.b)("h2",{id:"get-replies"},"Get replies"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"api.blockchain.getReplyIdsByPostId(id: AnyPostId): Promise<PostId[]>\n")),Object(c.b)("p",null,"Example: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"import { idToBn } from \"@subsocial/utils\"\n\n// Get reply ids (comments) by parent post id and fetch posts by ids\nconst replyIds = await api.blockchain.getReplyIdsByPostId(idToBn('1'))\n\n// For getting comments use posts functions\nconst replies = await api.findPublicPosts(replyIds)\n")))}l.isMDXComponent=!0}}]);