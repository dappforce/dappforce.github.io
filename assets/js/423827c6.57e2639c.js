(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{143:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),s=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=s.a.createContext({}),l=function(e){var t=s.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=l(e.components);return s.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},u=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),b=l(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return n?s.a.createElement(m,p(p({ref:t},i),{},{components:n})):s.a.createElement(m,p({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var i=2;i<r;i++)o[i]=n[i];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),s=n(7),r=(n(0),n(143)),o={id:"creating-posts",title:"Creating and updating"},p={unversionedId:"sdk/quick-start/posts/creating-posts",id:"sdk/quick-start/posts/creating-posts",isDocsHomePage:!1,title:"Creating and updating",description:"Create Post",source:"@site/docs/sdk/quick-start/posts/CreatingPosts.md",slug:"/sdk/quick-start/posts/creating-posts",permalink:"/docs/sdk/quick-start/posts/creating-posts",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/posts/CreatingPosts.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Posts",permalink:"/docs/sdk/quick-start/posts/getting-posts"},next:{title:"Post with details",permalink:"/docs/sdk/quick-start/posts/posts-with-details"}},c=[{value:"Create Post",id:"create-post",children:[{value:"Regular Post",id:"regular-post",children:[]},{value:"Shared Post",id:"shared-post",children:[]}]},{value:"Update post",id:"update-post",children:[]}],i={toc:c};function l(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"create-post"},"Create Post"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"substrateApi.tx.posts.createPost(spaceIdOpt, extension, content)\n")),Object(r.b)("p",null,"Params:",Object(r.b)("br",{parentName:"p"}),"\n","1: ",Object(r.b)("inlineCode",{parentName:"p"},"spaceIdOpt")," - Space where post will be published.",Object(r.b)("br",{parentName:"p"}),"\n","2: ",Object(r.b)("inlineCode",{parentName:"p"},"extension")," - kind of post. It can be a regular post, a shared post or a comment.",Object(r.b)("br",{parentName:"p"}),"\n","3: ",Object(r.b)("inlineCode",{parentName:"p"},"content")," - ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"IpfsContent"),' is function that return substrate like implementation for enum { IPFS: "CID of your content"}.'),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postextensionenum"},"PostExtensionEnum"),": ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/classes/regularpost.html"},Object(r.b)("em",{parentName:"a"},"RegularPost"))," | ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.comment.html"},Object(r.b)("em",{parentName:"a"},"Comment"))," | ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/classes/sharedpost.html"},Object(r.b)("em",{parentName:"a"},"SharedPost")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Examples:")),Object(r.b)("h3",{id:"regular-post"},"Regular Post"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  title: \"What is Subsocial?\",\n  image: \"QmcWWpR176oFao49jrLHUoH3R9MCziE5d77fdD8qdoiinx\",\n  tags: [ 'Hello world', 'FAQ' ],\n  body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { RegularPost: null}, IpfsContent(cid))\n\n...\n")),Object(r.b)("h3",{id:"shared-post"},"Shared Post"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { SharedPost: '1'}, IpfsContent(cid))\n...\n}\n")),Object(r.b)("h2",{id:"update-post"},"Update post"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"substrateApi.tx.posts.updatePost(postId: AnyPostId, update: PostUpdateType)\n")),Object(r.b)("p",null,"Params:",Object(r.b)("br",{parentName:"p"}),"\n","1: ",Object(r.b)("inlineCode",{parentName:"p"},"postId")," - id of the current space.",Object(r.b)("br",{parentName:"p"}),"\n","2: ",Object(r.b)("inlineCode",{parentName:"p"},"update")," - fields available to updating.  "),Object(r.b)("p",null,"Update properties:",Object(r.b)("br",{parentName:"p"}),"\n","1: ",Object(r.b)("inlineCode",{parentName:"p"},"spaceId?")," - ff we provide a new spaceId in update, it will move this post to another space.\n2: ",Object(r.b)("inlineCode",{parentName:"p"},"content?"),": ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"IpfsContent"),' is function that return substrate like implementation for enum { IPFS: "CID of your content"}.',Object(r.b)("br",{parentName:"p"}),"\n","3: ",Object(r.b)("inlineCode",{parentName:"p"},"hidden?")," - boolean, hidden post for other users.  "),Object(r.b)("p",null,"Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import {\n  IpfsContent, \n  OptionBool,\n  PostUpdate\n} from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  title: \"What is Subsocial?\",\n  image: \"QmcWWpR176oFao49jrLHUoH3R9MCziE5d77fdD8qdoiinx\",\n  tags: ['Hello world', 'FAQ', 'Subsoical'], //updated field\n  body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n})\n\nconst update = new PostUpdate({\n  content: IpfsContent(cid),\n  hidden: OptionBool(true),\n})\n\nconst tx = substrateApi.tx.spaces.posts.updatePost('1', update)\n...\n")))}l.isMDXComponent=!0}}]);