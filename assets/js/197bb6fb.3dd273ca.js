(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{143:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),m=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=m(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,b=u["".concat(c,".").concat(d)]||u[d]||l[d]||a;return n?o.a.createElement(b,s(s({ref:t},p),{},{components:n})):o.a.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var p=2;p<a;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return m}));var r=n(3),o=n(7),a=(n(0),n(143)),c={id:"creating-comments",title:"Creating"},s={unversionedId:"sdk/quick-start/comments/creating-comments",id:"sdk/quick-start/comments/creating-comments",isDocsHomePage:!1,title:"Creating",description:"Post methods are used for comments.",source:"@site/docs/sdk/quick-start/comments/CreatingComments.md",slug:"/sdk/quick-start/comments/creating-comments",permalink:"/docs/sdk/quick-start/comments/creating-comments",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/comments/CreatingComments.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Comments",permalink:"/docs/sdk/quick-start/comments/getting-comments"},next:{title:"What is Reaction?",permalink:"/docs/sdk/quick-start/reactions/overview"}},i=[{value:"Create comment",id:"create-comment",children:[{value:"Create a comment below a post",id:"create-a-comment-below-a-post",children:[]},{value:"Create a reply to a comment",id:"create-a-reply-to-a-comment",children:[]}]},{value:"Update Comment",id:"update-comment",children:[]}],p={toc:i};function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/posts/creating-posts"},"Post methods")," are used for comments."),Object(a.b)("h2",{id:"create-comment"},"Create comment"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { getSubstrateApi } from '@subsocial/api'\nimport { IpfsContent } from '@subsocial/types/substrate/classes'\n\nconst substrateApi = getSubstrateApi({ endpoint: substrateUrl })\n\nsubstrateApi.tx.posts.createPost(spaceIdOpt, { \u0421omment }, IpfsContent(\"CID of your content\"))\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(a.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.comment.html"},"Comment"))),Object(a.b)("p",null,"Comment properties:\n1: ",Object(a.b)("inlineCode",{parentName:"p"},"parentId?")," - id of the message that was replied to.\n2: ",Object(a.b)("inlineCode",{parentName:"p"},"rootPostId?")," - commented post id."),Object(a.b)("h3",{id:"create-a-comment-below-a-post"},"Create a comment below a post"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: null, rootPostId: '1'}}, IpfsContent(cid))\n\n...\n")),Object(a.b)("h3",{id:"create-a-reply-to-a-comment"},"Create a reply to a comment"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  body: 'Agree' //replied\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: '2', rootPostId: '1'}}, IpfsContent(cid))\n...\n")),Object(a.b)("h2",{id:"update-comment"},"Update Comment"),Object(a.b)("p",null,"For updating comments use ",Object(a.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/posts/creating-posts"},"post methods")))}m.isMDXComponent=!0}}]);