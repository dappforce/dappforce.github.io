(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{149:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return l}));var o=a(3),n=a(7),r=(a(0),a(162)),s={id:"apiTypes",title:"API Types",displayed_sidebar:"developSidebar"},i={unversionedId:"develop/getting-started/apiTypes",id:"develop/getting-started/apiTypes",isDocsHomePage:!1,title:"API Types",description:"Flat API",source:"@site/docs/develop/getting-started/APITypes.md",slug:"/develop/getting-started/apiTypes",permalink:"/docs/develop/getting-started/apiTypes",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/getting-started/APITypes.md",version:"current",sidebar:"developSidebar",previous:{title:"Installation",permalink:"/docs/develop/getting-started/installation"},next:{title:"Understanding The Testnet",permalink:"/docs/develop/getting-started/testnet"}},c=[{value:"Flat API",id:"flat-api",children:[]},{value:"SubsocialApi",id:"subsocialapi",children:[]},{value:"SubsocialSubstrateApi",id:"subsocialsubstrateapi",children:[]},{value:"SubsocialIpfsApi",id:"subsocialipfsapi",children:[]},{value:"Off-chain",id:"off-chain",children:[]},{value:"IPFS",id:"ipfs",children:[]}],p={toc:c};function l(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"flat-api"},"Flat API"),Object(r.b)("p",null,"Flat API creates a new connection to the Flat Subsocial API (with a wrapper which returns flat structs).\nThus, using the Flat, we abstract from the blockchain and can use the usual JavaScript types."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"FlatSubsocialApi(props: NewSubsocialApiProps): FlatSubsocialApi\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\ud83c\udd83 NewSubsocialApiProps: Omit<",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/api.html#subsocialapiprops"},Object(r.b)("em",{parentName:"a"},"SubsocialApiProps")),", 'substrateApi'> & { substrateNodeUrl: ",Object(r.b)("em",{parentName:"p"},"string"),", substrateApi?: ",Object(r.b)("em",{parentName:"p"},"ApiPromise")," }")),Object(r.b)("h2",{id:"subsocialapi"},"SubsocialApi"),Object(r.b)("p",null,"SubsocialApi creates a new connection to the Subsocial API (includes Substrate and IPFS connections)."),Object(r.b)("p",null,"Using this class, you can get all the data of posts, spaces and profiles from IPFS and the blockchain's storage with appropriate methods."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"SubsocialApi(props: SubsocialApiProps): SubsocialApi\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\ud83c\udd83 SubsocialApiProps: ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#subsocialcontext"},Object(r.b)("em",{parentName:"a"},"SubsocialContext"))," & { ipfsNodeUrl: ",Object(r.b)("em",{parentName:"p"},"string"),", offchainUrl: ",Object(r.b)("em",{parentName:"p"},"string"),", substrateApi: ",Object(r.b)("em",{parentName:"p"},"SubstrateApi")," }")),Object(r.b)("h2",{id:"subsocialsubstrateapi"},"SubsocialSubstrateApi"),Object(r.b)("p",null,"SubsocialSubstrateApi is a wrapper for connecting to a Subsocial Node with functions from Subsocial Pallets wrapped in convenient methods to call."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"SubsocialSubstrateApi(props: SubstrateApiProps): SubsocialSubstrateApi\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\ud83c\udd83 SubstrateApiProps:  ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#subsocialcontext"},Object(r.b)("em",{parentName:"a"},"SubsocialContext"))," & { api: ",Object(r.b)("em",{parentName:"p"},"SubstrateApi"),"  }")),Object(r.b)("h2",{id:"subsocialipfsapi"},"SubsocialIpfsApi"),Object(r.b)("p",null,"Aggregated API to work with IPFS: This gets the contents of spaces, posts, and profiles."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"SubsocialIpfsApi(props: SubsocialIpfsProps): SubsocialIpfsApi\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/api.html#subsocialipfsprops"},"SubsocialIpfsProps"),": ",Object(r.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#subsocialcontext"},Object(r.b)("em",{parentName:"a"},"SubsocialContext"))," & { ipfsNodeUrl: ",Object(r.b)("em",{parentName:"p"},"IpfsUrl"),"; offchainUrl: ",Object(r.b)("em",{parentName:"p"},"string")," }")),Object(r.b)("h2",{id:"off-chain"},"Off-chain"),Object(r.b)("p",null,"Off-chain is a storage where data is built on the basis of blockchain events. This allows you to conveniently perform work that the blockchain itself does not allow."),Object(r.b)("p",null,"It saves text data of blogs, posts and comments to IPFS, builds user feeds and notifications in Postgres,\nand supports full text search by indexing text data into an ElasticSeach database."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("a",{parentName:"p",href:"https://github.com/dappforce/subsocial-offchain/"},"off-chain repository"))),Object(r.b)("h2",{id:"ipfs"},"IPFS"),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://docs.ipfs.io/concepts/"},"InterPlanetary File System (IPFS)")," is a decentralized storage network commonly used by blockchain projects looking for a storage solution. It is similar to a torrent network where users download content to their machines, and upload it to people that wish to access it. IPFS node operators are able to choose what content they host on their node. Subsocial uses IPFS for multimedia storage."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("a",{parentName:"p",href:"https://docs.ipfs.io/concepts/"},"Learn more in the documentation"))))}l.isMDXComponent=!0},162:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return f}));var o=a(0),n=a.n(o);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),l=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=l(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(a),d=o,f=b["".concat(s,".").concat(d)]||b[d]||u[d]||r;return a?n.a.createElement(f,i(i({ref:t},p),{},{components:a})):n.a.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);