"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[1410],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=a.length,l=new Array(s);l[0]=d;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var c=2;c<s;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),o=a(4334);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(s,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(3117),o=a(7294),s=a(4334),l=a(2389),r=a(7392),i=a(7094),c=a(2466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:l,values:d,groupId:m,className:f}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,r.l)(b,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===l?l:l??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==v&&!b.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:w}=(0,i.U)(),[y,I]=(0,o.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=m){const e=h[m];null!=e&&e!==y&&b.some((t=>t.value===e))&&I(e)}const A=e=>{const t=e.currentTarget,a=T.indexOf(t),n=b[a].value;n!==y&&(N(t),I(n),null!=m&&w(m,String(n)))},S=e=>{let t=null;switch(e.key){case"Enter":A(e);break;case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},f)},b.map((e=>{let{value:t,label:a,attributes:l}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>T.push(e),onKeyDown:S,onClick:A},l,{className:(0,s.Z)("tabs__item",u,l?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,o.cloneElement)(k.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function m(e){const t=(0,l.Z)();return o.createElement(d,(0,n.Z)({key:String(t)},e))}},4845:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var n=a(3117),o=(a(7294),a(3905)),s=a(5488),l=a(5162);const r={id:"quick-reference",title:"Quick Reference",displayed_sidebar:"developSidebar"},i=void 0,c={unversionedId:"develop/quick-reference",id:"develop/quick-reference",title:"Quick Reference",description:"Here is a collection of the most commonly used methods within Subsocial SDK. For more in-depth look into this library, please reference the TypeDocs.",source:"@site/docs/develop/QuickReference.md",sourceDirName:"develop",slug:"/develop/quick-reference",permalink:"/docs/develop/quick-reference",draft:!1,editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/QuickReference.md",tags:[],version:"current",frontMatter:{id:"quick-reference",title:"Quick Reference",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Registering Usernames",permalink:"/docs/develop/how-to-guides/usernames/register-usernames"},next:{title:"Developer's FAQs",permalink:"/docs/develop/developers"}},p={},u=[{value:"Setup",id:"setup",level:2},{value:"Install",id:"install",level:3},{value:"Import",id:"import",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Signing and sending transactions",id:"signing-and-sending-transactions",level:2},{value:"Reading Data",id:"reading-data",level:2},{value:"Space",id:"space",level:3},{value:"Post",id:"post",level:3},{value:"Profile",id:"profile",level:3},{value:"Writing Data",id:"writing-data",level:2},{value:"Note",id:"note",level:3},{value:"Space",id:"space-1",level:3},{value:"Post",id:"post-1",level:3},{value:"Profile",id:"profile-1",level:3},{value:"Comments",id:"comments",level:2},{value:"Reading Comments",id:"reading-comments",level:3},{value:"Writing Comments",id:"writing-comments",level:3},{value:"Follows",id:"follows",level:2},{value:"Check if follower",id:"check-if-follower",level:3},{value:"Fetch list of followers",id:"fetch-list-of-followers",level:3},{value:"For Spaces",id:"for-spaces",level:4},{value:"For Accounts",id:"for-accounts",level:4},{value:"Follow / Unfollow",id:"follow--unfollow",level:3},{value:"For Spaces",id:"for-spaces-1",level:4},{value:"For Accounts",id:"for-accounts-1",level:4},{value:"Reactions",id:"reactions",level:2},{value:"Get all reactions",id:"get-all-reactions",level:3},{value:"Reacting to a post",id:"reacting-to-a-post",level:3}],d={toc:u};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Here is a collection of the most commonly used methods within Subsocial SDK. For more in-depth look into this library, please reference the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/index.html"},"TypeDocs"),".")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("h3",{id:"install"},"Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @subsocial/api\n")),(0,o.kt)("p",null,"Add utils library:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @subsocial/utils\n")),(0,o.kt)("h3",{id:"import"},"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { SubsocialApi } from "@subsocial/api";\n')),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)(s.Z,{defaultValue:"testnet",values:[{label:"TestNet",value:"testnet"},{label:"MainNet",value:"mainnet"},{label:"LocalNet",value:"localnet"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"mainnet",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://para.f3joule.space",\n  ipfsNodeUrl: "https://ipfs.subsocial.network",\n};\n'))),(0,o.kt)(l.Z,{value:"testnet",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://rco-para.subsocial.network",\n  ipfsNodeUrl: "https://gw.crustfiles.app",\n};\n'))),(0,o.kt)(l.Z,{value:"localnet",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "http://127.0.0.1:9944",\n  ipfsNodeUrl: "http://127.0.0.1:8080",\n};\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Make sure to run local Subsocial & IPFS node before using these configs in your project.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const api = await SubsocialApi.create(config);\n")),(0,o.kt)("h2",{id:"signing-and-sending-transactions"},"Signing and sending transactions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Keyring } from "@polkadot/keyring";\n\nconst keyring = new Keyring({ type: "sr25519" });\nconst accountPair = keyring.addFromMnemonic("add your mnemonic here");\n\ntx.signAndSend(accountPair, async (result) => {\n  const { status } = result;\n\n  if (!result || !status) {\n    return;\n  }\n\n  if (status.isFinalized || status.isInBlock) {\n    const blockHash = status.isFinalized\n      ? status.asFinalized\n      : status.asInBlock;\n\n    console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n  } else if (result.isError) {\n    console.log(JSON.stringify(result));\n  } else {\n    console.log(`\u23f1 Current tx status: ${status.type}`);\n  }\n});\n')),(0,o.kt)("h2",{id:"reading-data"},"Reading Data"),(0,o.kt)("h3",{id:"space"},"Space"),(0,o.kt)("p",null,"Space is the place where all content on SubSocial lives. It holds multiple posts from different people depending upon the permission. ",(0,o.kt)("a",{parentName:"p",href:"/docs/basics/glossary/overview#spaces"},"Read More")),(0,o.kt)(s.Z,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Owner",value:"owner"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"byid",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const spaceId = 1;\nconst space = await api.findSpace({ id: spaceId });\n"))),(0,o.kt)(l.Z,{value:"owner",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const ownerAccountId = "<owner_account_public_key>";\n\n// Fetching ids of all the spaces by owner.\nconst spaceIds = await api.blockchain.spaceIdsByOwner(ownerAccountId);\n\n// Fetching space data from all ids.\nconst spaces = await api.base.findSpaces({ ids: spaceIds });\n')))),"// This linked docs are deprecated Check full docs [here](/docs/develop/how-to-guides/spaces/fetch-spaces).",(0,o.kt)("h3",{id:"post"},"Post"),(0,o.kt)("p",null,"Post is the piece of content that provides value for the readers. It can be some written text, an image, or a video. ",(0,o.kt)("a",{parentName:"p",href:"/docs/basics/glossary/overview#posts"},"Read More")),(0,o.kt)(s.Z,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Space Id",value:"byspaceid"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"byid",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const postId = 1;\nconst post = await api.findPost({ id: postId });\n"))),(0,o.kt)(l.Z,{value:"byspaceid",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const spaceId = 1;\nconst postIds = await api.blockchain.postIdsBySpaceId(spaceId);\n\nconst posts = await api.base.findPosts({ ids: postIds });\n")))),(0,o.kt)("p",null,"// This linked docs are deprecated\nCheck full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/posts/fetch-posts"},"here"),"."),(0,o.kt)("h3",{id:"profile"},"Profile"),(0,o.kt)("p",null,"Profile is linked to your Subsocial account address, and is an overview of your activity on Subsocial. You can set a profile picture and a username for your account, as well as a personal website link.\n",(0,o.kt)("a",{parentName:"p",href:"/docs/basics/glossary/overview#profile"},"Read More")),(0,o.kt)(s.Z,{defaultValue:"singleprofile",values:[{label:"Single Account",value:"singleprofile"},{label:"Multiple Accounts",value:"multipleprofiles"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"singleprofile",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<account_public_key>";\nconst profile = await api.base.findProfileSpace(accountId);\n'))),(0,o.kt)(l.Z,{value:"multipleprofiles",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountIds = ["<account_public_key_1>", "<account_public_key_2>"];\nconst profiles = await api.base.findProfileSpaces(accountIds);\n')))),(0,o.kt)("p",null,"// Deprecated\nCheck full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/profiles/fetch-profiles"},"here"),"."),(0,o.kt)("h2",{id:"writing-data"},"Writing Data"),(0,o.kt)("h3",{id:"note"},"Note"),(0,o.kt)("p",null,"To store data on IPFS, it is necessary to setup CRUST IPFS account and pushing the data from your account."),(0,o.kt)("p",null,"You generate authHeader and setup with Subsocial SDK like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { generateCrustAuthToken } from "@subsocial/api/utils/ipfs";\nconst authHeader = generateCrustAuthToken(\n  "bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice"\n);\n\n// Use this ipfs object, to store data on Crust IPFS cluster.\nconst ipfs = new SubsocialIpfsApi({\n  ipfsNodeUrl: "https://crustwebsites.net",\n});\n\nipfs.setWriteHeaders({\n  authorization: "Basic " + authHeader,\n});\n')),(0,o.kt)("h3",{id:"space-1"},"Space"),(0,o.kt)("p",null,"Add following import statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent, OptionBool } from "@subsocial/api/substrate/wrappers";\n')),(0,o.kt)("p",null,"Storing space details in IPFS, and generating a CID."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\n\nconst cid = await ipfs.saveContent({\n  about:\n    "Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS",\n  image: ipfsImageCid,\n  name: "Subsocial",\n  tags: ["subsocial"],\n});\n')),(0,o.kt)("p",null,"Creating a Space transaction object"),(0,o.kt)(s.Z,{defaultValue:"create",values:[{label:"Create Space",value:"create"},{label:"Update Space",value:"update"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"create",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const substrateApi = await api.substrateApi;\nconst spaceTransaction = substrateApi.tx.spaces.createSpace(\n  IpfsContent(cid),\n  null // Permissions config (optional)\n);\n"))),(0,o.kt)(l.Z,{value:"update",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const substrateApi = await api.substrateApi;\nconst update = {\n  content: IpfsContent(cid),\n  hidden: new OptionBool(true),\n};\n\nconst spaceTransaction = substrateApi.tx.spaces.updateSpace("1", update);\n')))),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/spaces/create-spaces"},"here"),"."),(0,o.kt)("h3",{id:"post-1"},"Post"),(0,o.kt)("p",null,"Add following import statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent, OptionBool } from "@subsocial/api/substrate/wrappers";\n')),(0,o.kt)("p",null,"Storing post details in IPFS, and generating a CID."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\n\nconst cid = await ipfs.saveContent({\n  title: "What is Subsocial?",\n  image: ipfsImageCid,\n  tags: ["Hello world", "FAQ"],\n  body: "Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.",\n});\n')),(0,o.kt)("p",null,"Creating a post transaction object"),(0,o.kt)(s.Z,{defaultValue:"regular",values:[{label:"Regular Post",value:"regular"},{label:"Shared Post",value:"shared"},{label:"Update Post",value:"update"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"regular",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1"; // The space in which you\'re posting.\nconst substrateApi = await api.substrateApi;\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId,\n  { RegularPost: null }, // Creates a regular post.\n  IpfsContent(cid)\n);\n'))),(0,o.kt)(l.Z,{value:"shared",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1"; // The space in which you\'re posting.\nconst parentPostId = "2"; // The original post you want to share.\n\n// Creating new sharedPostCid having shared message.\nconst sharedPostCid = await ipfs.saveContent({\n  body: "Keep up the good work!",\n});\n\nconst substrateApi = await api.substrateApi;\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId,\n  { SharedPost: parentPostId }, // Creates a shared post.\n  IpfsContent(sharedPostCid)\n);\n'))),(0,o.kt)(l.Z,{value:"update",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const postId = "7"; // Id of post which you want to update.\nconst substrateApi = await api.substrateApi;\n\nconst update = {\n  content: IpfsContent(cid),\n  hidden: new OptionBool(true),\n};\n\nconst postTransaction = substrateApi.tx.posts.updatePost(postId, update);\n')))),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/posts/create-posts"},"here"),"."),(0,o.kt)("h3",{id:"profile-1"},"Profile"),(0,o.kt)("p",null,"Add the following import statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n')),(0,o.kt)("p",null,"Storing profile details in IPFS, and generating a CID to add on blockchain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const ipfsImageCid = await api.ipfs.saveFile(file);\nconst cid = await ipfs.saveContent({\n  about: "Subsocial official account.",\n  avatar: ipfsImageCid,\n  name: "Subsocial",\n});\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Profiles in Subsocial is a simple space with it's Id marked on the blockchain to represent as profile.")),(0,o.kt)("p",null,"Now, create a new space as mentioned ",(0,o.kt)("a",{parentName:"p",href:"http://docs.subsocial.network/docs/develop/quick-reference#space-1"},"here"),". So we can mark it as profile."),(0,o.kt)("p",null,"Creating a profile object:"),(0,o.kt)(s.Z,{defaultValue:"createprofile",values:[{label:"Create Profile",value:"createprofile"},{label:"Reset Profile",value:"updateprofile"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"createprofile",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const substrateApi = await api.substrateApi;\n\nconst spaceId = 3232; // The Id of space you want to mark as profile.\nconst profileTransaction = substrateApi.tx.profiles.setProfile(spaceId);\n"))),(0,o.kt)(l.Z,{value:"updateprofile",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const profileTransaction = substrateApi.tx.profiles.resetProfile();\n")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To change profile data, update the profile space from it's id.")),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/profiles/create-profiles"},"here"),"."),(0,o.kt)("h2",{id:"comments"},"Comments"),(0,o.kt)("p",null,"Comments are replies to a post that are visible below a post."),(0,o.kt)("h3",{id:"reading-comments"},"Reading Comments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { idToBn } from "@subsocial/utils";\n\nconst postId = "1";\n\n// Get reply ids (comments) by parent post id and fetch posts by ids\nconst replyIds = await api.blockchain.getReplyIdsByPostId(idToBn(postId));\n\n// For getting comments use posts functions\nconst replies = await api.findPublicPosts(replyIds);\n')),(0,o.kt)("h3",{id:"writing-comments"},"Writing Comments"),(0,o.kt)(s.Z,{defaultValue:"commentToPost",values:[{label:"Create",value:"commentToPost"},{label:"Update",value:"replyToComment"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"commentToPost",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n\nconst spaceId = "1"; // Optional.\nconst rootPostId = "1";\nconst cid = await ipfs.saveContent({\n  body: "Keep up the good work!",\n});\n\nconst substrateApi = await api.substrateApi;\n\nconst tx = substrateApi.tx.posts.createPost(\n  spaceId,\n  { Comment: { parentId: null, rootPostId } },\n  IpfsContent(cid)\n);\n'))),(0,o.kt)(l.Z,{value:"replyToComment",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { IpfsContent } from "@subsocial/api/substrate/wrappers";\n\nconst spaceId = "1"; // Optional.\nconst parentId = "2"; // Parent comment id.\nconst rootPostId = "1";\nconst cid = await ipfs.saveContent({\n  body: "Agree", // Reply message.\n});\n\nconst substrateApi = await api.substrateApi;\n\nconst tx = substrateApi.tx.posts.createPost(\n  spaceId,\n  { Comment: { parentId, rootPostId } },\n  IpfsContent(cid)\n);\n')))),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/comments/fetch-comments"},"here"),"."),(0,o.kt)("h2",{id:"follows"},"Follows"),(0,o.kt)("h3",{id:"check-if-follower"},"Check if follower"),(0,o.kt)("p",null,"This checks if an account is following a particular space."),(0,o.kt)(s.Z,{defaultValue:"isSpaceFollower",values:[{label:"Is Space Follower",value:"isSpaceFollower"},{label:"Is Account Follower",value:"isAccountFollower"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"isSpaceFollower",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst spaceId = "1";\n\nconst isFollower = await api.blockchain.isSpaceFollower(accountId, spaceId);\n'))),(0,o.kt)(l.Z,{value:"isAccountFollower",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const yourAccountId = "<any_public_key>";\nconst otherAccountId = "<any_public_key>";\n\nconst isFollower = await api.blockchain.isAccountFollower(\n  yourAccountId,\n  otherAccountId\n);\n')))),(0,o.kt)("h3",{id:"fetch-list-of-followers"},"Fetch list of followers"),(0,o.kt)("h4",{id:"for-spaces"},"For Spaces"),(0,o.kt)(s.Z,{defaultValue:"spacefollowers",values:[{label:"By Space Id",value:"spacefollowers"},{label:"Followed by Account Id",value:"replyToComment"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"spacefollowers",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.spaceFollows.spaceFollowers(spaceId);\nconst followersSpaceIds = res;\n'))),(0,o.kt)(l.Z,{value:"replyToComment",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.spaceFollows.spacesFollowedByAccount(\n  accountId\n);\nconst followedSpaceIds = res;\n')))),(0,o.kt)("h4",{id:"for-accounts"},"For Accounts"),(0,o.kt)(s.Z,{defaultValue:"spacefollowers",values:[{label:"Followers",value:"spacefollowers"},{label:"Following",value:"replyToComment"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"spacefollowers",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.accountFollows.accountFollowers(accountId);\nconst followersOfAccount = res;\n'))),(0,o.kt)(l.Z,{value:"replyToComment",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountId = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst res = await substrateApi.query.accountFollows.accountsFollowedByAccount(\n  accountId\n);\nconst followingOfAccount = res;\n')))),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/follow/fetch-follow"},"here"),"."),(0,o.kt)("h3",{id:"follow--unfollow"},"Follow / Unfollow"),(0,o.kt)("h4",{id:"for-spaces-1"},"For Spaces"),(0,o.kt)(s.Z,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"spacefollowers",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.spaceFollows.followSpace(spaceId);\n'))),(0,o.kt)(l.Z,{value:"replyToComment",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const spaceId = "1";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.spaceFollows.unfollowSpace(spaceId);\n')))),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("h4",{id:"for-accounts-1"},"For Accounts"),(0,o.kt)(s.Z,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"spacefollowers",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountIdToFollow = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.accountFollows.followAccount(accountIdToFollow);\n'))),(0,o.kt)(l.Z,{value:"replyToComment",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const accountIdToFollow = "<any_public_key>";\nconst substrateApi = await api.substrateApi;\nconst tx = substrateApi.tx.accountFollows.followAccount(accountIdToFollow);\n')))),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/follow/create-follow"},"here"),"."),(0,o.kt)("h2",{id:"reactions"},"Reactions"),(0,o.kt)("p",null,"Reactions are your signs to ",(0,o.kt)("inlineCode",{parentName:"p"},"Upvote")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Downvote")," a post."),(0,o.kt)("h3",{id:"get-all-reactions"},"Get all reactions"),(0,o.kt)(s.Z,{defaultValue:"single",values:[{label:"Single Reaction",value:"single"},{label:"Multiple Reactions",value:"multi"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"single",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const myAccount = "<any_account_public_key>";\nconst reaction = await api.blockchain.getPostReactionIdByAccount(\n  myAccount,\n  "1"\n);\n'))),(0,o.kt)(l.Z,{value:"multi",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { ReactionId } from "@subsocial/api/types/substrate";\n\nconst myAccount = "<any_account_public_key>";\n\nconst substrateApi = await api.substrateApi;\n\nconst tuples = ["1", "2", "3"].map((postId) => [myAccount, postId]);\n\nconst reactionIds =\n  await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples);\nconst reactions = await api.blockchain.findReactions(\n  reactionIds as ReactionId[]\n);\n')))),(0,o.kt)("h3",{id:"reacting-to-a-post"},"Reacting to a post"),(0,o.kt)(s.Z,{defaultValue:"createReaction",values:[{label:"Create",value:"createReaction"},{label:"Update",value:"updateReaction"},{label:"Delete",value:"deleteReaction"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"createReaction",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id you want to react on.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.createPostReaction(\n  postId,\n  "Upvote"\n);\n'))),(0,o.kt)(l.Z,{value:"updateReaction",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id you want to update reaction on.\nconst reactionId = "2"; // Reaction Id to update.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.updatePostReaction(\n  postId,\n  reactionId,\n  "Downvote"\n);\n'))),(0,o.kt)(l.Z,{value:"deleteReaction",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const postId = "1"; // Post Id on which reaction you want to delete reaction.\nconst reactionId = "2"; // Reaction Id to delete.\nconst substrateApi = await api.substrateApi;\n\nconst reactionTx = substrateApi.tx.reactions.deletePostReaction(\n  postId,\n  reactionId\n);\n')))),(0,o.kt)("p",null,"Sign and send the transaction"),(0,o.kt)("p",null,"Check full docs ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/how-to-guides/reactions/create-reactions"},"here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")))}m.isMDXComponent=!0}}]);