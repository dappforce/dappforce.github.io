"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[9096],{5388:(e,n,t)=>{t.d(n,{c:()=>r});var a=t(1504),s=t(4971);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.c)(o.tabItem,r),hidden:t},n)}},1268:(e,n,t)=>{t.d(n,{c:()=>S});var a=t(5072),s=t(1504),o=t(4971),r=t(3943),l=t(5592),i=t(632),u=t(7128),c=t(1148);function d(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,u.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.Uz)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._M)(o),(0,s.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=p(e),[r,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[i,u]=y({queryString:t,groupId:a}),[d,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.IN)(t);return[a,(0,s.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),m=(()=>{const e=i??d;return g({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{m&&l(m)}),[m]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var m=t(3664);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:n,block:t,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.MV)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==l&&(d(n),i(a))},g=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.c)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:r}=e;return s.createElement("li",(0,a.c)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:g,onClick:p},r,{className:(0,o.c)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":l===n})}),t??n)})))}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=h(e);return s.createElement("div",{className:(0,o.c)("tabs-container",b.tabList)},s.createElement(f,(0,a.c)({},e,n)),s.createElement(w,(0,a.c)({},e,n)))}function S(e){const n=(0,m.c)();return s.createElement(v,(0,a.c)({key:String(n)},e))}},1996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=t(5072),s=(t(1504),t(5788)),o=t(1268),r=t(5388);t(4628);const l={id:"playground",title:"Playground",description:"Subsocial's Playground is a simple-to-use developer tool that allows you to run code snippets from our SDK in seconds, all without downloading anything.",keywords:["Subsocial JS SDK Playground","Web3 Social","Blockchain","Developers","Subsocial"],displayed_sidebar:"developSidebar"},i=void 0,u={unversionedId:"develop/playground",id:"develop/playground",title:"Playground",description:"Subsocial's Playground is a simple-to-use developer tool that allows you to run code snippets from our SDK in seconds, all without downloading anything.",source:"@site/docs/develop/Playground.md",sourceDirName:"develop",slug:"/develop/playground",permalink:"/docs/develop/playground",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/Playground.md",tags:[],version:"current",frontMatter:{id:"playground",title:"Playground",description:"Subsocial's Playground is a simple-to-use developer tool that allows you to run code snippets from our SDK in seconds, all without downloading anything.",keywords:["Subsocial JS SDK Playground","Web3 Social","Blockchain","Developers","Subsocial"],displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"SDK Cheatsheet",permalink:"/docs/develop/sdk-cheatsheet"},next:{title:"GraqhQL APIs",permalink:"/docs/develop/subsocial-graqhql"}},c={},d=[{value:"Try out the Subsocial Playground",id:"try-out-the-subsocial-playground",level:3},{value:"Built-in APIs",id:"built-in-apis",level:2},{value:"Subsocial API",id:"subsocial-api",level:3},{value:"IPFS API",id:"ipfs-api",level:3},{value:"Keyring",id:"keyring",level:3},{value:"Sending Transaction",id:"sending-transaction",level:3},{value:"Using Keyring",id:"using-keyring",level:4},{value:"Using Polkadot.js Extension",id:"using-polkadotjs-extension",level:4},{value:"Syntax",id:"syntax",level:4}],p={toc:d},g="wrapper";function y(e){let{components:n,...t}=e;return(0,s.yg)(g,(0,a.c)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("head",null,(0,s.yg)("title",null,"Subsocial SDK Playground - Run code snippets online")),(0,s.yg)("p",null,"Subsocial's Playground is an easy tool that allows you to run code snippets from our SDK without downloading anything."),(0,s.yg)("p",null,"This Playground provides a perfect environment to play, test and debug some of your code snippets before building a real project. "),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"The Playground is running on our Testnet called Soonsocial. You can get some test tokens from our ",(0,s.yg)("a",{parentName:"p",href:"https://discord.gg/w2Rqy2M"},"Discord bot"),".")),(0,s.yg)("h3",{id:"try-out-the-subsocial-playground"},"Try out the ",(0,s.yg)("a",{parentName:"h3",href:"https://play.subsocial.network/"},"Subsocial Playground")),(0,s.yg)("h2",{id:"built-in-apis"},"Built-in APIs"),(0,s.yg)("p",null,"It comes with a set of rules & in-built function to help you focus on library methods rather than writing everything from scratch. The following list represents these functions and their code: "),(0,s.yg)("h3",{id:"subsocial-api"},"Subsocial API"),(0,s.yg)("p",null,"The Subsocial Playground comes with the Subsocial SDK's ",(0,s.yg)("inlineCode",{parentName:"p"},"api")," instance. This is used to interact with most of the SDK methods. Here is how it's being created under the hood:"),(0,s.yg)(o.c,{defaultValue:"testnet",values:[{label:"TestNet",value:"testnet"},{label:"MainNet",value:"mainnet"},{label:"xSocial",value:"xsocial"},{label:"LocalNet",value:"localnet"}],mdxType:"Tabs"},(0,s.yg)(r.c,{value:"mainnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'wss://para.f3joule.space',\n    ipfsNodeUrl: 'https://ipfs.subsocial.network'\n  }\n"))),(0,s.yg)(r.c,{value:"testnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'wss://rco-para.subsocial.network',\n    ipfsNodeUrl: 'https://gw.crustfiles.app'\n  }\n"))),(0,s.yg)(r.c,{value:"xsocial",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'const config = {\n  substrateNodeUrl: "wss://xsocial.subsocial.network",\n  ipfsNodeUrl: "https://gw.crustfiles.app",\n};\n'))),(0,s.yg)(r.c,{value:"localnet",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'http://127.0.0.1:9944',\n    ipfsNodeUrl: 'http://127.0.0.1:8080'\n  }\n")),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Make sure to run local Subsocial & IPFS nodes before using these configs in your project.")))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  const api = api = await SubsocialApi.create({\n    ...configDetails,\n    useServer: {\n      httpRequestMethod: 'get'\n    }\n  })\n")),(0,s.yg)("h3",{id:"ipfs-api"},"IPFS API"),(0,s.yg)("p",null,"The Subsocial Playground comes with the CRUST IPFS API's ",(0,s.yg)("inlineCode",{parentName:"p"},"ipfs")," instance. This is use to store data related spaces, posts and comments on the network. Let's see how the configuration is set:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  // Required only for Testnet.\n  const authHeader = 'c3ViLTVGQTluUURWZzI2N0RFZDhtMVp5cFhMQm52TjdTRnhZd1Y3bmRxU1lHaU45VFRwdToweDEwMmQ3ZmJhYWQwZGUwNzFjNDFmM2NjYzQzYmQ0NzIxNzFkZGFiYWM0MzEzZTc5YTY3ZWExOWM0OWFlNjgyZjY0YWUxMmRlY2YyNzhjNTEwZGY4YzZjZTZhYzdlZTEwNzY2N2YzYTBjZjM5OGUxN2VhMzAyMmRkNmEyYjc1OTBi';\n\n  api.ipfs.setWriteHeaders({\n    authorization: 'Basic ' + authHeader\n  })\n")),(0,s.yg)("h3",{id:"keyring"},"Keyring"),(0,s.yg)("p",null,"The Subsocial Playground comes with a basic ",(0,s.yg)("inlineCode",{parentName:"p"},"keyring")," instance to help you sign and send transactions. By default, we use the Alice (Test) account for our Testnet transactions, but you can change it if you want. "),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  import { Keyring } from \"@polkadot/api\"\n  import { waitReady } from '@polkadot/wasm-crypto';\n\n  await waitReady()\n  const keyring = new Keyring({ type: 'sr25519' })\n")),(0,s.yg)("h3",{id:"sending-transaction"},"Sending Transaction"),(0,s.yg)("p",null,"The Subsocial Playground allows you to sign and send transactions with Mnemonic phrases using both Keyring and the Polkadot.js extension. "),(0,s.yg)("h4",{id:"using-keyring"},"Using Keyring"),(0,s.yg)("p",null,"To sign and send transactions with Mnemonic phrases through Keyring, use:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  transaction.signAndSend(pair, logger) \n")),(0,s.yg)("p",null,"The logger is a method that tracks the transaction and show toasts in UI. Here's how it works:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"const logger = (result: any) => {\n    const { status } = result\n\n    if (!result || !status) {\n      return;\n    }\n    if (status.isFinalized) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      console.log('\u2705 Tx finalized. Block hash', blockHash.toString());\n      showToast(`\u2705 Transaction: ${status.isFinalized ? 'Finalised' : 'Added in Block'}`);\n      const newIds = getNewIdsFromEvent(result); // get first argument from array.\n      if (newIds.length > 0) {\n        showToast(`\u26a1\ufe0f New Item Id: ${newIds[0]}`)\n      }\n      return;\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n      showToast(JSON.stringify(result));\n    } else {\n      console.log('\u23f1 Current tx status:', status.type);\n      showToast(`\u23f1 Current tx status: ${status.type}`);\n    }\n  }\n")),(0,s.yg)("h4",{id:"using-polkadotjs-extension"},"Using Polkadot.js Extension"),(0,s.yg)("p",null,"Signing using the Polkadot.js extension: "),(0,s.yg)("h4",{id:"syntax"},"Syntax"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  signAndSendTx(transactionVariable, accountAddressToSignFrom)\n")),(0,s.yg)("p",null,"Implementation of signAndSendTx function: "),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript"},"  const signAndSendTx = async (tx: any, accountId: string) => {\n    const { isWeb3Injected, web3Enable, web3AccountsSubscribe, web3FromAddress } = await import('@polkadot/extension-dapp')\n    const injectedExtensions = await web3Enable('twitter-dapp-subsocial')\n    if (!isWeb3Injected) {\n      showToast(`Browser does not have any polkadot.js extension`);\n      return;\n    }\n\n    if (!injectedExtensions.length) {\n      showToast(`Polkadot Extension has not authorized us to get accounts`);\n      return;\n    }\n\n    await web3AccountsSubscribe(async (accounts) => {\n      if (accounts.length > 0) {\n        const addresses = accounts.map((account) => account.address)\n\n        const containsAddress = addresses.includes(accountId)\n        if (!containsAddress) {\n          showToast(\"\ud83d\ude2c Address not found on Polkadot.js extension.\")\n          return;\n        }\n        const { signer } = await web3FromAddress(accountId)\n        await tx.signAsync(accountId, { signer })\n\n        await tx.send(logger)\n      }\n    })\n  }\n")))}y.isMDXComponent=!0}}]);