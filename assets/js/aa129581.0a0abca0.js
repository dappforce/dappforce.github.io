"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[1756],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),s=n(4334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>g});var a=n(3117),s=n(7294),o=n(4334),i=n(2389),l=n(7392),r=n(7094),u=n(2466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){const{lazy:t,block:n,defaultValue:i,values:p,groupId:g,className:h}=e,m=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=p??m.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,l.l)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===i?i:i??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:w}=(0,r.U)(),[v,T]=(0,s.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:S}=(0,u.o5)();if(null!=g){const e=f[g];null!=e&&e!==v&&b.some((t=>t.value===e))&&T(e)}const x=e=>{const t=e.currentTarget,n=N.indexOf(t),a=b[n].value;a!==v&&(S(t),T(a),null!=g&&w(g,String(a)))},I=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,o.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>N.push(e),onKeyDown:I,onClick:x},i,{className:(0,o.Z)("tabs__item",c,i?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,s.cloneElement)(m.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},m.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function g(e){const t=(0,i.Z)();return s.createElement(p,(0,a.Z)({key:String(t)},e))}},3804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=n(3117),s=(n(7294),n(3905)),o=n(5488),i=n(5162);n(814);const l={id:"playground",title:"Playground",displayed_sidebar:"developSidebar"},r=void 0,u={unversionedId:"develop/playground",id:"develop/playground",title:"Playground",description:"Subsocial's Playground is an easy tool that allows you to run code snippets from our SDK without downloading anything.",source:"@site/docs/develop/Playground.md",sourceDirName:"develop",slug:"/develop/playground",permalink:"/docs/develop/playground",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/Playground.md",tags:[],version:"current",frontMatter:{id:"playground",title:"Playground",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"SDK Cheatsheet",permalink:"/docs/develop/sdk-cheatsheet"},next:{title:"Subsocial GraqhQL",permalink:"/docs/develop/subsocial-graqhql"}},d={},c=[{value:"Try out the Subsocial Playground",id:"try-out-the-subsocial-playground",level:3},{value:"Built-in APIs",id:"built-in-apis",level:2},{value:"Subsocial API",id:"subsocial-api",level:3},{value:"IPFS API",id:"ipfs-api",level:3},{value:"Keyring",id:"keyring",level:3},{value:"Sending Transaction",id:"sending-transaction",level:3},{value:"Using Keyring",id:"using-keyring",level:4},{value:"Using Polkadot.js Extension",id:"using-polkadotjs-extension",level:4},{value:"Syntax",id:"syntax",level:4}],p={toc:c};function g(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Subsocial's Playground is an easy tool that allows you to run code snippets from our SDK without downloading anything."),(0,s.kt)("p",null,"This Playground provides a perfect environment to play, test and debug some of your code snippets before building a real project. "),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The Playground is running on our Testnet called Soonsocial. You can get some test tokens from our ",(0,s.kt)("a",{parentName:"p",href:"https://discord.gg/JRTMTtPK"},"Discord bot"),".")),(0,s.kt)("h3",{id:"try-out-the-subsocial-playground"},"Try out the ",(0,s.kt)("a",{parentName:"h3",href:"https://play.subsocial.network/"},"Subsocial Playground")),(0,s.kt)("h2",{id:"built-in-apis"},"Built-in APIs"),(0,s.kt)("p",null,"It comes with a set of rules & in-built function to help you focus on library methods rather than writing everything from scratch. The following list represents these functions and their code: "),(0,s.kt)("h3",{id:"subsocial-api"},"Subsocial API"),(0,s.kt)("p",null,"The Subsocial Playground comes with the Subsocial SDK's ",(0,s.kt)("inlineCode",{parentName:"p"},"api")," instance. This is used to interact with most of the SDK methods. Here is how it's being created under the hood:"),(0,s.kt)(o.Z,{defaultValue:"testnet",values:[{label:"TestNet",value:"testnet"},{label:"MainNet",value:"mainnet"},{label:"LocalNet",value:"localnet"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"mainnet",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'wss://para.f3joule.space',\n    ipfsNodeUrl: 'https://ipfs.subsocial.network'\n  }\n"))),(0,s.kt)(i.Z,{value:"testnet",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'wss://rco-para.subsocial.network',\n    ipfsNodeUrl: 'https://gw.crustfiles.app'\n  }\n"))),(0,s.kt)(i.Z,{value:"localnet",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"  const configDetails = {\n    substrateNodeUrl: 'http://127.0.0.1:9944',\n    ipfsNodeUrl: 'http://127.0.0.1:8080'\n  }\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"Make sure to run local Subsocial & IPFS nodes before using these configs in your project.")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  const api = api = await SubsocialApi.create({\n    ...configDetails,\n    useServer: {\n      httpRequestMethod: 'get'\n    }\n  })\n")),(0,s.kt)("h3",{id:"ipfs-api"},"IPFS API"),(0,s.kt)("p",null,"The Subsocial Playground comes with the CRUST IPFS API's ",(0,s.kt)("inlineCode",{parentName:"p"},"ipfs")," instance. This is use to store data related spaces, posts and comments on the network. Let's see how the configuration is set:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Required only for Testnet.\n  const authHeader = 'c3ViLTVGQTluUURWZzI2N0RFZDhtMVp5cFhMQm52TjdTRnhZd1Y3bmRxU1lHaU45VFRwdToweDEwMmQ3ZmJhYWQwZGUwNzFjNDFmM2NjYzQzYmQ0NzIxNzFkZGFiYWM0MzEzZTc5YTY3ZWExOWM0OWFlNjgyZjY0YWUxMmRlY2YyNzhjNTEwZGY4YzZjZTZhYzdlZTEwNzY2N2YzYTBjZjM5OGUxN2VhMzAyMmRkNmEyYjc1OTBi';\n\n  api.ipfs.setWriteHeaders({\n    authorization: 'Basic ' + authHeader\n  })\n")),(0,s.kt)("h3",{id:"keyring"},"Keyring"),(0,s.kt)("p",null,"The Subsocial Playground comes with a basic ",(0,s.kt)("inlineCode",{parentName:"p"},"keyring")," instance to help you sign and send transactions. By default, we use the Alice (Test) account for our Testnet transactions, but you can change it if you want. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  import { Keyring } from \"@polkadot/api\"\n  import { waitReady } from '@polkadot/wasm-crypto';\n\n  await waitReady()\n  const keyring = new Keyring({ type: 'sr25519' })\n")),(0,s.kt)("h3",{id:"sending-transaction"},"Sending Transaction"),(0,s.kt)("p",null,"The Subsocial Playground allows you to sign and send transactions with Mnemonic phrases using both Keyring and the Polkadot.js extension. "),(0,s.kt)("h4",{id:"using-keyring"},"Using Keyring"),(0,s.kt)("p",null,"To sign and send transactions with Mnemonic phrases through Keyring, use:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  transaction.signAndSend(pair, logger) \n")),(0,s.kt)("p",null,"The logger is a method that tracks the transaction and show toasts in UI. Here's how it works:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const logger = (result: any) => {\n    const { status } = result\n\n    if (!result || !status) {\n      return;\n    }\n    if (status.isFinalized) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      console.log('\u2705 Tx finalized. Block hash', blockHash.toString());\n      showToast(`\u2705 Transaction: ${status.isFinalized ? 'Finalised' : 'Added in Block'}`);\n      const newIds = getNewIdsFromEvent(result); // get first argument from array.\n      if (newIds.length > 0) {\n        showToast(`\u26a1\ufe0f New Item Id: ${newIds[0]}`)\n      }\n      return;\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n      showToast(JSON.stringify(result));\n    } else {\n      console.log('\u23f1 Current tx status:', status.type);\n      showToast(`\u23f1 Current tx status: ${status.type}`);\n    }\n  }\n")),(0,s.kt)("h4",{id:"using-polkadotjs-extension"},"Using Polkadot.js Extension"),(0,s.kt)("p",null,"Signing using the Polkadot.js extension: "),(0,s.kt)("h4",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  signAndSendTx(transactionVariable, accountAddressToSignFrom)\n")),(0,s.kt)("p",null,"Implementation of signAndSendTx function: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"  const signAndSendTx = async (tx: any, accountId: string) => {\n    const { isWeb3Injected, web3Enable, web3AccountsSubscribe, web3FromAddress } = await import('@polkadot/extension-dapp')\n    const injectedExtensions = await web3Enable('twitter-dapp-subsocial')\n    if (!isWeb3Injected) {\n      showToast(`Browser does not have any polkadot.js extension`);\n      return;\n    }\n\n    if (!injectedExtensions.length) {\n      showToast(`Polkadot Extension has not authorized us to get accounts`);\n      return;\n    }\n\n    await web3AccountsSubscribe(async (accounts) => {\n      if (accounts.length > 0) {\n        const addresses = accounts.map((account) => account.address)\n\n        const containsAddress = addresses.includes(accountId)\n        if (!containsAddress) {\n          showToast(\"\ud83d\ude2c Address not found on Polkadot.js extension.\")\n          return;\n        }\n        const { signer } = await web3FromAddress(accountId)\n        await tx.signAsync(accountId, { signer })\n\n        await tx.send(logger)\n      }\n    })\n  }\n")))}g.isMDXComponent=!0}}]);