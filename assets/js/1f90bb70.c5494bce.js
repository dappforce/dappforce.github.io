(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{143:function(e,t,s){"use strict";s.d(t,"a",(function(){return b})),s.d(t,"b",(function(){return m}));var a=s(0),n=s.n(a);function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function i(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function l(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?i(Object(s),!0).forEach((function(t){o(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,a,n=function(e,t){if(null==e)return{};var s,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)s=o[a],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)s=o[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var c=n.a.createContext({}),d=function(e){var t=n.a.useContext(c),s=t;return e&&(s="function"==typeof e?e(t):l(l({},t),e)),s},b=function(e){var t=d(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var s=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),b=d(s),u=a,m=b["".concat(i,".").concat(u)]||b[u]||p[u]||o;return s?n.a.createElement(m,l(l({ref:t},c),{},{components:s})):n.a.createElement(m,l({ref:t},c))}));function m(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=s.length,i=new Array(o);i[0]=u;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=s[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,s)}u.displayName="MDXCreateElement"},82:function(e,t,s){"use strict";s.r(t),s.d(t,"frontMatter",(function(){return i})),s.d(t,"metadata",(function(){return l})),s.d(t,"toc",(function(){return r})),s.d(t,"default",(function(){return d}));var a=s(3),n=s(7),o=(s(0),s(143)),i={id:"posts-with-details",title:"Posts With Details"},l={unversionedId:"sdk/quick-start/posts/posts-with-details",id:"sdk/quick-start/posts/posts-with-details",isDocsHomePage:!1,title:"Posts With Details",description:"All entities (posts, profiles, and spaces) are interconnected. For faster data retrieval use",source:"@site/docs/sdk/quick-start/posts/PostWithDetails.md",slug:"/sdk/quick-start/posts/posts-with-details",permalink:"/docs/sdk/quick-start/posts/posts-with-details",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/posts/PostWithDetails.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating And Updating",permalink:"/docs/sdk/quick-start/posts/creating-posts"},next:{title:"What is Comment (replies)?",permalink:"/docs/sdk/quick-start/comments/overview"}},r=[{value:"Find and load a single post",id:"find-and-load-a-single-post",children:[{value:"findPostWithAllDetails",id:"findpostwithalldetails",children:[]},{value:"findPostWithSomeDetails",id:"findpostwithsomedetails",children:[]}]},{value:"Find and load an array of posts",id:"find-and-load-an-array-of-posts",children:[{value:"findPostsWithAllDetails",id:"findpostswithalldetails",children:[]},{value:"findPublicPostsWithAllDetails",id:"findpublicpostswithalldetails",children:[]},{value:"findUnlistedPostsWithAllDetails",id:"findunlistedpostswithalldetails",children:[]},{value:"findPublicPostsWithSomeDetails",id:"findpublicpostswithsomedetails",children:[]}]}],c={toc:r};function d(e){var t=e.components,s=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,s,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"All entities (posts, profiles, and spaces) are interconnected. For faster data retrieval use\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"findPostWithAllDetails")," method."),Object(o.b)("h2",{id:"find-and-load-a-single-post"},"Find and load a single post"),Object(o.b)("h3",{id:"findpostwithalldetails"},"findPostWithAllDetails"),Object(o.b)("p",null,"Finds and loads a post with their extension and the owner's profile and space (if defined)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findPostWithAllDetails(id: AnyPostId): Promise<PostWithAllDetails | undefined>\n")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithAllDetails('1')\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": {"id": "3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8"...},\n  "space": {"id": "1"...}\n}\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(o.b)("em",{parentName:"a"},"PostId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(o.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(o.b)("em",{parentName:"a"},"PostWithSpace")))),Object(o.b)("h3",{id:"findpostwithsomedetails"},"findPostWithSomeDetails"),Object(o.b)("p",null,"Finds and loads a post with their extension and the owner's profile (if defined)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findPostWithSomeDetails(query: FindPostWithDetailsQuery): Promise<PostWithSomeDetails | undefined>\n")),Object(o.b)("p",null,"Properties:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ids")," - An array of IDs of desired structs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for the visible state of the structs (\nsee ",Object(o.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withContentOnly?")," - Boolean."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withSpace?")," - Pass ",Object(o.b)("inlineCode",{parentName:"li"},"true")," to get the space data."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withOwner?")," - Pass ",Object(o.b)("inlineCode",{parentName:"li"},"true")," to get the profile data.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),": 'onlyVisible' | 'onlyHidden' | 'onlyPublic' | 'onlyUnlisted'"),Object(o.b)("p",{parentName:"blockquote"},"The four visible state filters correspond to the next conditions:"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"onlyVisible")," \u2013 returns posts where the ",Object(o.b)("inlineCode",{parentName:"li"},"hidden")," field on the corresponding Substrate struct is ",Object(o.b)("inlineCode",{parentName:"li"},"false"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"onlyHidden")," \u2013 returns posts where the ",Object(o.b)("inlineCode",{parentName:"li"},"hidden")," field on the corresponding Substrate struct is ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"onlyPublic")," \u2013 returns posts where the ",Object(o.b)("inlineCode",{parentName:"li"},"hidden")," field on the corresponding Substrate struct is ",Object(o.b)("inlineCode",{parentName:"li"},"false"),"\nand there is a corresponding JSON file on IPFS."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"onlyUnlisted")," \u2013 returns posts where either the ",Object(o.b)("inlineCode",{parentName:"li"},"hidden")," field is ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"\nor there is no corresponding JSON file on IPFS."))),Object(o.b)("p",null,"Example: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithSomeDetails({id: '1'})\n")),Object(o.b)("p",null,"Output: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": undefined,\n  "space": undefined\n}\n')),Object(o.b)("p",null,"Example with owner: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithSomeDetails({id: '1', withOwner: true})\n")),Object(o.b)("p",null,"Output: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": {"id": "3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8"...},\n  "space": undefined\n}\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},"PostWithSomeDetails"),": { ext?: ",Object(o.b)("em",{parentName:"p"},"Exclude"),"<",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},Object(o.b)("em",{parentName:"a"},"PostWithSomeDetails")),', "ext">; owner?: ',Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#profiledata"},Object(o.b)("em",{parentName:"a"},"ProfileData")),"; post: ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postdata"},Object(o.b)("em",{parentName:"a"},"PostData")),"; space?: ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#spacedata"},Object(o.b)("em",{parentName:"a"},"SpaceData"))," }")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostwithdetailsquery"},"FindPostWithDetailsQuery"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostquery"},Object(o.b)("em",{parentName:"a"},"FindPostQuery"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postdetailsopts"},Object(o.b)("em",{parentName:"a"},"PostDetailsOpts"),"   "))),Object(o.b)("h2",{id:"find-and-load-an-array-of-posts"},"Find and load an array of posts"),Object(o.b)("h3",{id:"findpostswithalldetails"},"findPostsWithAllDetails"),Object(o.b)("p",null,"findPostsWithAllDetails returns information of the post, space and owner (profile)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findPostsWithAllDetails(query: FindPostsQuery): Promise<PostWithAllDetails[]>\n")),Object(o.b)("p",null,"Properties:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ids")," - An array of IDs of desired structs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for the visible state of the structs (\nsee ",Object(o.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withContentOnly?")," - Boolean.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostsquery"},"FindPostsQuery"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findstructs"},Object(o.b)("em",{parentName:"a"},"FindStructs"))," < ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},Object(o.b)("em",{parentName:"a"},"AnyPostId"))," >")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(o.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(o.b)("em",{parentName:"a"},"PostWithSpace")))),Object(o.b)("p",null,"\ud83d\udc47 ",Object(o.b)("strong",{parentName:"p"},"There are also methods with ready-made visibility filters.")),Object(o.b)("h3",{id:"findpublicpostswithalldetails"},"findPublicPostsWithAllDetails"),Object(o.b)("p",null,"Find and load posts that have the ",Object(o.b)("inlineCode",{parentName:"p"},"hidden == false")," field in their Substrate struct and their IPFS content is\nnot empty, using their extension and the owner's profile and space (if defined)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findPublicPostsWithAllDetails(ids: AnyPostId[]): Promise<PostWithAllDetails[]>\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(o.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(o.b)("em",{parentName:"a"},"PostWithSpace")))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(o.b)("em",{parentName:"a"},"PostId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("h3",{id:"findunlistedpostswithalldetails"},"findUnlistedPostsWithAllDetails"),Object(o.b)("p",null,"Find and load posts that have the ",Object(o.b)("inlineCode",{parentName:"p"},"hidden == true")," field in their Substrate struct and their IPFS content is\nnot empty, using their extension and owner's profile and space (if defined)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findUnlistedPostsWithAllDetails(ids: AnyPostId[]): Promise<PostWithAllDetails[]>\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(o.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(o.b)("em",{parentName:"a"},"PostWithSpace")))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(o.b)("em",{parentName:"a"},"PostId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("h3",{id:"findpublicpostswithsomedetails"},"findPublicPostsWithSomeDetails"),Object(o.b)("p",null,"Load an array of information about public posts with the space and/or owner."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flatApi.findPublicPostsWithSomeDetails(query: FindPostsWithDetailsQuery): Promise<PostWithSomeDetails[]\n")),Object(o.b)("p",null,"Properties:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ids")," - An array of IDs of desired structs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for the visible state of the structs (\nsee ",Object(o.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withContentOnly?")," - Boolean."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withSpace?")," - Pass ",Object(o.b)("inlineCode",{parentName:"li"},"true")," to get the space data."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withOwner?")," - Pass ",Object(o.b)("inlineCode",{parentName:"li"},"true")," to get the profile data.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostswithdetailsquery"},"FindPostsWithDetailsQuery"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostsquery"},Object(o.b)("em",{parentName:"a"}," FindPostsQuery"))," & ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postdetailsopts"},Object(o.b)("em",{parentName:"a"},"PostDetailsOpts")))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},"PostWithSomeDetails"),": { ext?: ",Object(o.b)("em",{parentName:"p"},"Exclude"),"<",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},Object(o.b)("em",{parentName:"a"},"PostWithSomeDetails")),', "ext">; owner?: ',Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#profiledata"},Object(o.b)("em",{parentName:"a"},"ProfileData")),"; post: ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postdata"},Object(o.b)("em",{parentName:"a"},"PostData")),"; space?: ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#spacedata"},Object(o.b)("em",{parentName:"a"},"SpaceData"))," }")))}d.isMDXComponent=!0}}]);