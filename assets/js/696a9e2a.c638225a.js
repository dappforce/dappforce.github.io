"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[1917],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(3117),o=(n(7294),n(3905));const i={id:"extensions",title:"Understanding Extensions",description:"Learn what Grill Extensions are and how you can leverage them to create improved chat experiences for your users.",keywords:["Extensions","Grill Light","Building on the Grill app","Web3 Social","Blockchain","Subsocial"],displayed_sidebar:"developSidebar"},a=void 0,s={unversionedId:"develop/grill-light/extensions",id:"develop/grill-light/extensions",title:"Understanding Extensions",description:"Learn what Grill Extensions are and how you can leverage them to create improved chat experiences for your users.",source:"@site/docs/develop/grill-light/Extensions.md",sourceDirName:"develop/grill-light",slug:"/develop/grill-light/extensions",permalink:"/docs/develop/grill-light/extensions",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/grill-light/Extensions.md",tags:[],version:"current",frontMatter:{id:"extensions",title:"Understanding Extensions",description:"Learn what Grill Extensions are and how you can leverage them to create improved chat experiences for your users.",keywords:["Extensions","Grill Light","Building on the Grill app","Web3 Social","Blockchain","Subsocial"],displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Setting Up Grill Locally",permalink:"/docs/develop/grill-light/setup"},next:{title:"Overview",permalink:"/docs/develop/grill-light/extension/overview"}},l={},c=[{value:"What are extensions?",id:"what-are-extensions",level:2},{value:"How do extensions work?",id:"how-do-extensions-work",level:2},{value:"Structuring an extension in the chat",id:"structuring-an-extension-in-the-chat",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Grill Light introduces support for Custom Extensions which increases the scope of in-chat elements for your users."),(0,o.kt)("h2",{id:"what-are-extensions"},"What are extensions?"),(0,o.kt)("p",null,"An extension is a schema definition for a new set of chat elements with proper components and a very specific use case for sharing information."),(0,o.kt)("admonition",{title:"Example",type:"info"},(0,o.kt)("p",{parentName:"admonition"}," The ",(0,o.kt)("strong",{parentName:"p"},"NFT Extension")," allows people to share NFTs as a chat element in the Grill app from different chains like Ethereum, Solana, etc. ")),(0,o.kt)("h2",{id:"how-do-extensions-work"},"How do extensions work?"),(0,o.kt)("p",null,"Every extension have three things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An input form for the user to share data about the chat element (for example, the contract address & token id of an NFT)"),(0,o.kt)("li",{parentName:"ul"},"JSON Schema to set the structure of the data for storage before it is sent to IPFS"),(0,o.kt)("li",{parentName:"ul"},"Parser with React component that shows the chat element in the Grill App UI and gives users a functionality to interact with. ")),(0,o.kt)("h2",{id:"structuring-an-extension-in-the-chat"},"Structuring an extension in the chat"),(0,o.kt)("p",null,"A typical chat message on Grill has the following schema when it is sent to IPFS for storage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "body": "", // Chat message here.\n  "extensions": [ // Array of chat extensions.\n    {...}, // Extension for NFT.\n    {...}, // Extension for Image.\n    {...} // or any other extension.\n  ]\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In the following pages, we will see how to create an extension for images in the Grill app.")))}u.isMDXComponent=!0}}]);