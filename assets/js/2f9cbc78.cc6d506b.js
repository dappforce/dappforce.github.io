(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{143:function(t,e,n){"use strict";n.d(e,"a",(function(){return u})),n.d(e,"b",(function(){return m}));var a=n(0),r=n.n(a);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=r.a.createContext({}),l=function(t){var e=r.a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},u=function(t){var e=l(t.components);return r.a.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},b=r.a.forwardRef((function(t,e){var n=t.components,a=t.mdxType,s=t.originalType,o=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=l(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||s;return n?r.a.createElement(m,c(c({ref:e},p),{},{components:n})):r.a.createElement(m,c({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var s=n.length,o=new Array(s);o[0]=b;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:a,o[1]=c;for(var p=2;p<s;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},87:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return o})),n.d(e,"metadata",(function(){return c})),n.d(e,"toc",(function(){return i})),n.d(e,"default",(function(){return l}));var a=n(3),r=n(7),s=(n(0),n(143)),o={id:"transactions",title:"Transactions"},c={unversionedId:"sdk/quick-start/transactions",id:"sdk/quick-start/transactions",isDocsHomePage:!1,title:"Transactions",description:"All posts and spaces are associated with public key pairs (accounts).",source:"@site/docs/sdk/quick-start/Transactions.md",slug:"/sdk/quick-start/transactions",permalink:"/docs/sdk/quick-start/transactions",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/Transactions.md",version:"current",sidebar:"someSidebar",previous:{title:"How to connect to Subsocial",permalink:"/docs/sdk/quick-start/connection"},next:{title:"What is Space?",permalink:"/docs/sdk/quick-start/spaces/overview"}},i=[{value:"Example code",id:"example-code",children:[]},{value:"More examples",id:"more-examples",children:[]}],p={toc:i};function l(t){var e=t.components,n=Object(r.a)(t,["components"]);return Object(s.b)("wrapper",Object(a.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"All posts and spaces are associated with public key pairs (accounts).\nSo, these and other structures can be created or updated using ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions"),".\nAlso, Subsocial supports the ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/extension/"},"Polkadot {.js} extension"),", which allows you to easily manage your keys in the browser"),Object(s.b)("h2",{id:"example-code"},"Example code"),Object(s.b)("p",null,"Let's start with an example of creating a space:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst createSpace = async () => {\n  // wait initialize wasm\n  await waitReady()\n  \n  const substrateApi = await flatApi.subsocial.substrate.api\n  const ipfs = await flatApi.subsocial.ipfs\n  \n  //create content \n  const cid = await ipfs.saveContent({\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n    image: 'Qmasp4JHhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe', // ipfsImageCid = await flatApi.subsocial.ipfs.saveFile(file)\n    name: 'Subsocial',\n    tags: ['subsocial']\n  })\n\n  const tx = substrateApi.tx.spaces.createSpace(\n    null,\n    null,\n    IpfsContent(cid),\n    null\n  )\n\n  const accountPair = keyring.addFromMnemonic('your mnemonic')\n\n  tx.signAndSend(accountPair, async (result) => {\n    const { status } = result;\n\n    if (!result || !status) {\n      return;\n    }\n\n    if (status.isFinalized || status.isInBlock) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      \n      console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n    } else {\n      console.log(`\u23f1 Current tx status: ${status.type}`);\n    }\n  });\n}\n")),Object(s.b)("p",null,"Fist we created instance of the Keyring class (lean more about keyring ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/keyring/start/"},"here"),") ,\nIn the next step  we connected to substrate API using getSubstrateApi and substrate node url, also we connected to ipfs by flatApi.\nAfter that we can use ipfs for creating content and substrateApi. We use the previously created content to create a space and then conduct a transaction."),Object(s.b)("p",null,"Lear more about ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions")," and ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/util-crypto/examples/create-mnemonic"},"mnemonic")," "),Object(s.b)("h2",{id:"more-examples"},"More examples"),Object(s.b)("h4",{id:"create-a-vote-reaction"},"Create a vote reaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst makeUpvote = async () => {\n  await waitReady()\n\n  const substrateApi = await flatApi.subsocial.substrate.api\n  const tx = substrateApi.tx.reactions.createPostReaction('1', 'Upvote')\n\n  const accountPair = keyring.addFromMnemonic('your mnemonic')\n\n  tx.signAndSend(accountPair);\n}\n")),Object(s.b)("h4",{id:"start-following-space"},"Start following space"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst followSpace = async () => {\n  await waitReady()\n\n  const substrateApi = await flatApi.subsocial.substrate.api\n  const tx = substrateApi.tx.spaceFollows.followSpace('1')\n  \n  const accountPair = keyring.addFromMnemonic('your mnemonic')\n\n  tx.signAndSend(accountPair);\n}\n")))}l.isMDXComponent=!0}}]);