"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[6345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=m(n),u=a,b=d["".concat(c,".").concat(u)]||d[u]||i[u]||o;return n?r.createElement(b,s(s({ref:t},l),{},{components:n})):r.createElement(b,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var m=2;m<o;m++)s[m]=n[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4195:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>i,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var r=n(3117),a=(n(7294),n(3905));const o={id:"create-comments",title:"Create And Update Comments",displayed_sidebar:"developSidebar"},s=void 0,p={unversionedId:"develop/sdk/comments/create-comments",id:"develop/sdk/comments/create-comments",title:"Create And Update Comments",description:"This section covers how to create and update comments on the Subsocial blockchain.",source:"@site/docs/develop/sdk/comments/CreateComments.md",sourceDirName:"develop/sdk/comments",slug:"/develop/sdk/comments/create-comments",permalink:"/docs/develop/sdk/comments/create-comments",draft:!1,editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/sdk/comments/CreateComments.md",tags:[],version:"current",frontMatter:{id:"create-comments",title:"Create And Update Comments",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Fetch Comments",permalink:"/docs/develop/sdk/comments/fetch-comments"},next:{title:"Fetch Reactions",permalink:"/docs/develop/sdk/reactions/fetch-reactions"}},c={},m=[{value:"Create a comment",id:"create-a-comment",level:2},{value:"Create a comment below a post",id:"create-a-comment-below-a-post",level:3},{value:"Create a reply to a comment",id:"create-a-reply-to-a-comment",level:3},{value:"Update A Comment",id:"update-a-comment",level:2}],l={toc:m};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This section covers how to create and update comments on the Subsocial blockchain.")),(0,a.kt)("h2",{id:"create-a-comment"},"Create a comment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\n\nconst substrateApi = await api.substrateApi\n\nsubstrateApi.tx.posts.createPost(spaceIdOpt, { \u0421omment }, IpfsContent(\"CID of your content\"))\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd78 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.comment.html"},"Comment")," ")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Properties"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"parentId?")),(0,a.kt)("td",{parentName:"tr",align:null},"ID of the post or comment that was replied to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"rootPostId?")),(0,a.kt)("td",{parentName:"tr",align:null},"ID of the original post.")))),(0,a.kt)("p",null,"Comments directly under a post will have the same parentId and rootPostId."),(0,a.kt)("h3",{id:"create-a-comment-below-a-post"},"Create a comment below a post"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/api/substrate/wrappers\"\n\n...\nconst cid = await api.ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst substrateApi = await api.substrateApi\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: null, rootPostId: '1'}}, IpfsContent(cid))\n\n...\n")),(0,a.kt)("h3",{id:"create-a-reply-to-a-comment"},"Create a reply to a comment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/api/substrate/wrappers\"\n\n...\nconst cid = await api.ipfs.saveContent({\n  body: 'Agree' //replied\n})\n\nconst substrateApi = await api.substrateApi\n\nconst tx = substrateApi.tx.posts.createPost('1', { Comment: { parentId: '2', rootPostId: '1'}}, IpfsContent(cid))\n...\n")),(0,a.kt)("h2",{id:"update-a-comment"},"Update A Comment"),(0,a.kt)("p",null,"For updating comments use ",(0,a.kt)("a",{parentName:"p",href:"/docs/develop/sdk/posts/create-posts"},"post methods"),"."))}i.isMDXComponent=!0}}]);