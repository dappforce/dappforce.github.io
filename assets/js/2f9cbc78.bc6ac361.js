(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{162:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=a,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||o;return n?r.a.createElement(m,i(i({ref:t},p),{},{components:n})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),o=(n(0),n(162)),s={id:"transactions",title:"Transactions"},i={unversionedId:"sdk/quick-start/transactions",id:"sdk/quick-start/transactions",isDocsHomePage:!1,title:"Transactions",description:"All posts and spaces are associated with public key pairs called accounts.",source:"@site/docs/sdk/quick-start/Transactions.md",slug:"/sdk/quick-start/transactions",permalink:"/docs/sdk/quick-start/transactions",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/Transactions.md",version:"current",sidebar:"someSidebar",previous:{title:"About SubSocial Testnet",permalink:"/docs/sdk/quick-start/testnet"},next:{title:"What Does Subsocial Consist Of?",permalink:"/docs/sdk/quick-start/parts"}},c=[{value:"Creating a Space",id:"creating-a-space",children:[]},{value:"More examples",id:"more-examples",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"All posts and spaces are associated with public key pairs called accounts.\nSo, these structures can be created or updated via ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions"),". And you need to use a wallet / extension to sign these transactions. Therefore, Subsocial supports the ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/extension/"},"Polkadot {.js} extension"),", which allows you to easily manage your keys in a browser."),Object(o.b)("h2",{id:"creating-a-space"},"Creating a Space"),Object(o.b)("p",null,"You need to add 2 more dependencies for this"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"  yarn add @polkadot/keyring @polkadot/wasm-crypto\n")),Object(o.b)("p",null,"Let's start with an example of creating a space:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\n// Create a keyring instance.\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst createSpace = async () => {\n  // wait initialize wasm.\n  await waitReady()\n  \n  const substrateApi = await flatApi.subsocial.substrate.api\n  const ipfs = await flatApi.subsocial.ipfs\n  \n  // create content object on IPFS and get CID.\n  const ipfsImageCid = await flatApi.subsocial.ipfs.saveFile(file)\n\n  const cid = await ipfs.saveContent({\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n    image: ipfsImageCid,\n    name: 'Subsocial',\n    tags: ['subsocial']\n  })\n\n  /* Creating a transaction for the createSpace method.\n   createSpace(\n    parentId: optional,\n    handleId: optional,\n    content: string or IPFS CID or any other (required),\n    permissions: optional\n   )\n  */\n  const tx = substrateApi.tx.spaces.createSpace(\n    null,\n    null,\n    IpfsContent(cid),\n    null\n  )\n\n  // Add your mnemonic in a config file and import it from there.\n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  // Signing the transaction and sending for execution.\n  tx.signAndSend(accountPair, async (result) => {\n    const { status } = result;\n\n    if (!result || !status) {\n      return;\n    }\n\n    if (status.isFinalized || status.isInBlock) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      \n      console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n    } else {\n      console.log(`\u23f1 Current tx status: ${status.type}`);\n    }\n  });\n}\n")),Object(o.b)("p",null,"Fist we created an instance of the Keyring class (lean more about keyrings ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/keyring/start/"},"here"),").\nIn the next step we connected to the Substrate API using getSubstrateApi and the Substrate node URL, and we also connected to IPFS by flatApi.\nAfter that we used substrateAPI and IPFS for creating content. Then, we used the previously created content to create a space and then sign a transaction."),Object(o.b)("p",null,"Learn more about ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions")," and ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/util-crypto/examples/create-mnemonic"},"mnemonics"),". "),Object(o.b)("h2",{id:"more-examples"},"More examples"),Object(o.b)("h4",{id:"create-a-vote-reaction"},"Create a vote reaction"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst makeUpvote = async () => {\n  await waitReady()\n\n  const substrateApi = await flatApi.subsocial.substrate.api\n\n  /*\n    createPostReaction(\n      postId: number,\n      kind: 'Upvote' | 'Downvote' | number\n    )\n  */\n  const tx = substrateApi.tx.reactions.createPostReaction('1', 'Upvote')\n\n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  tx.signAndSend(accountPair);\n}\n")),Object(o.b)("h4",{id:"start-following-a-space"},"Start following a space"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst followSpace = async () => {\n  await waitReady()\n\n  const substrateApi = await flatApi.subsocial.substrate.api\n\n  /*\n    followSpace(\n      spaceId: u64 | number\n    )\n  */\n  const tx = substrateApi.tx.spaceFollows.followSpace(1)\n  \n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  tx.signAndSend(accountPair);\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"For more convenient work with accounts and keys, use ",Object(o.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/extension/usage"},"the polkadot.{js} extension"),".")))}l.isMDXComponent=!0}}]);