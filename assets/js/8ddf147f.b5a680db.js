(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{126:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return r})),a.d(t,"toc",(function(){return b})),a.d(t,"TransactionSnippet",(function(){return u})),a.d(t,"default",(function(){return m}));var s=a(3),n=a(7),o=(a(0),a(163)),c=a(208),l=a(209),i=a(192),p={id:"quick-reference",title:"Quick Reference"},r={unversionedId:"sdk/quick-reference",id:"sdk/quick-reference",isDocsHomePage:!1,title:"Quick Reference",description:"const senderKeyPair = keyring.addFromMnemonic('')",source:"@site/docs/sdk/QuickReference.md",slug:"/sdk/quick-reference",permalink:"/docs/sdk/quick-reference",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/QuickReference.md",version:"current",sidebar:"someSidebar",previous:{title:"Following And Unfollowing",permalink:"/docs/sdk/quick-start/follow/following"},next:{title:"Intro",permalink:"/docs/sdk/advanced/intro"}},b=[{value:"Setup",id:"setup",children:[{value:"Install",id:"install",children:[]},{value:"Import",id:"import",children:[]},{value:"Configuration",id:"configuration",children:[]}]},{value:"Reading Data",id:"reading-data",children:[{value:"Space",id:"space",children:[]},{value:"Post",id:"post",children:[]},{value:"Profile",id:"profile",children:[]}]},{value:"Writing Data",id:"writing-data",children:[{value:"Space",id:"space-1",children:[]},{value:"Post",id:"post-1",children:[]},{value:"Profile",id:"profile-1",children:[]}]},{value:"Comments",id:"comments",children:[{value:"Reading Comments",id:"reading-comments",children:[]},{value:"Writing Comments",id:"writing-comments",children:[]}]},{value:"Follows",id:"follows",children:[{value:"Check if follower",id:"check-if-follower",children:[]},{value:"Fetch list of followers",id:"fetch-list-of-followers",children:[]},{value:"Follow / Unfollow",id:"follow--unfollow",children:[]}]},{value:"Reactions",id:"reactions",children:[{value:"Get all reactions",id:"get-all-reactions",children:[]},{value:"Reacting to a post",id:"reacting-to-a-post",children:[]}]}],u=function(e){var t=e.variableName;return Object(o.b)(i.a,{language:"tsx",mdxType:"CodeBlock"},"  const keyring = (new Keyring({ type: \"sr25519\" }))\n  const senderKeyPair = keyring.addFromMnemonic('<your_mnemonic_here>')\n  \n  "+t+".signAndSend(senderKeyPair, async (result) => {\n      const { status } = result\n      \n      if(!result || !status){\n        return;\n      }\n      if (status.isFinalized || status.isInBlock) {\n        const blockHash = status.isFinalized\n          ? status.asFinalized\n          : status.asInBlock; \n          console.log('\u2705 Tx finalized. Block hash', blockHash.toString());\n      } else if (result.isError) {\n        console.log(JSON.stringify(result));\n      } else {\n        console.log('\u23f1 Current tx status:', status.type);\n      }\n  })\n")},d={toc:b,TransactionSnippet:u};function m(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(s.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Here is a collection of the most commonly used methods within Subsocial SDK. For more in-depth look into this library, please reference the ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/index.html"},"TypeDocs"),"."))),Object(o.b)("h2",{id:"setup"},"Setup"),Object(o.b)("h3",{id:"install"},"Install"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"  yarn add @subsocial/api \n")),Object(o.b)("p",null,"Add type definitions and utils library:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"  yarn add @subsocial/types @subsocial/definitions @subsocial/utils\n")),Object(o.b)("h3",{id:"import"},"Import"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"  import { newFlatSubsocialApi } from '@subsocial/api'\n")),Object(o.b)("h3",{id:"configuration"},"Configuration"),Object(o.b)(c.a,{defaultValue:"testnet",values:[{label:"TestNet",value:"testnet"},{label:"MainNet",value:"mainnet"},{label:"LocalNet",value:"localnet"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"mainnet",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const config = {\n    substrateNodeUrl: 'wss://rpc.subsocial.network',\n    offchainUrl: 'https://app.subsocial.network/offchain',\n    ipfsNodeUrl: 'https://app.subsocial.network/ipfs'\n  }\n"))),Object(o.b)(l.a,{value:"testnet",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const config = {\n    substrateNodeUrl: 'wss://testnet.subsocial.network',\n    offchainUrl: 'https://staging.subsocial.network/offchain',\n    ipfsNodeUrl: 'https://staging.subsocial.network/ipfs'\n  }\n"))),Object(o.b)(l.a,{value:"localnet",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const config = {\n    substrateNodeUrl: 'http://127.0.0.1:9944',\n    offchainUrl: 'http://127.0.0.1:3001',\n    ipfsNodeUrl: 'http://127.0.0.1:8080'\n  }\n")),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Make sure to run local Subsocial & IPFS node before using these configs in your project."))))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"  const flatApi = await newFlatSubsocialApi(config)\n")),Object(o.b)("h2",{id:"reading-data"},"Reading Data"),Object(o.b)("h3",{id:"space"},"Space"),Object(o.b)("p",null,"Space is the place where all content on SubSocial lives. It holds multiple posts from different people depending upon the permission. ",Object(o.b)("a",{parentName:"p",href:"/docs/glossary/overview#spaces"},"Read More")),Object(o.b)(c.a,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Owner",value:"owner"},{label:"By Handle",value:"handle"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"byid",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = 1\n  const space = await flatApi.findSpace({id: spaceId})\n"))),Object(o.b)(l.a,{value:"owner",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const ownerAccountId = '<owner_account_public_key>'\n\n  // Fetching ids of all the spaces by owner.\n  const spaceIds = await flatApi.subsocial.substrate.spaceIdsByOwner(ownerAccountId)\n\n  // Fetching space data from all ids.\n  const spaces = await flatApi.subsocial.findSpaces({ids: spaceIds})\n"))),Object(o.b)(l.a,{value:"handle",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const handleName = 'subsocial'\n\n  // Fetching spaceId by Handle.\n  const spaceId = await flatApi.subsocial.substrate.getSpaceIdByHandle(handleName)\n\n  // Fetching space by spaceId.\n  const space = await flatApi.findSpace({id: spaceId})\n")))),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/spaces/getting-spaces"},"here"),"."),Object(o.b)("h3",{id:"post"},"Post"),Object(o.b)("p",null,"Post is the piece of content that provides value for the readers. It can be some written text, an image, or a video. ",Object(o.b)("a",{parentName:"p",href:"/docs/glossary/overview#posts"},"Read More")),Object(o.b)(c.a,{defaultValue:"byid",values:[{label:"By Id",value:"byid"},{label:"By Space Id",value:"byspaceid"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"byid",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const postId = 1\n  const post = await flatApi.findPost(postId)\n"))),Object(o.b)(l.a,{value:"byspaceid",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = 1\n  const postIds = await flatApi.subsocial.substrate.postIdsBySpaceId(spaceId)\n\n  const posts = await flatApi.subsocial.findPosts({ids: postIds})\n")))),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/posts/getting-posts"},"here"),"."),Object(o.b)("h3",{id:"profile"},"Profile"),Object(o.b)("p",null,"Profile is linked to your Subsocial account address, and is an overview of your activity on Subsocial. You can set a profile picture and a username for your account, as well as a personal website link.\n",Object(o.b)("a",{parentName:"p",href:"/docs/glossary/overview#profile"},"Read More")),Object(o.b)(c.a,{defaultValue:"singleprofile",values:[{label:"Single Account",value:"singleprofile"},{label:"Multiple Accounts",value:"multipleprofiles"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"singleprofile",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const accountId = '<account_public_key>'\n  const profile = await flatApi.findProfile(accountId)\n"))),Object(o.b)(l.a,{value:"multipleprofiles",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const accountIds = ['<account_public_key_1>', '<account_public_key_2>']\n  const profiles = await flatApi.findProfiles(accountIds)\n")))),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/profiles/getting-profiles"},"here"),"."),Object(o.b)("h2",{id:"writing-data"},"Writing Data"),Object(o.b)("h3",{id:"space-1"},"Space"),Object(o.b)("p",null,"Add following import statement: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'  import {\n    IpfsContent, \n    OptionBool,\n    SpaceUpdate\n  } from "@subsocial/types/substrate/classes" \n')),Object(o.b)("p",null,"Storing space details in IPFS, and generating a CID."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const ipfsImageCid = await api.subsocial.ipfs.saveFile(file)\n\n  const cid = await ipfs.saveContent({\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n    image: ipfsImageCid, \n    name: 'Subsocial',\n    tags: [ 'subsocial' ]\n  })\n")),Object(o.b)("p",null,"Creating a Space transaction object"),Object(o.b)(c.a,{defaultValue:"create",values:[{label:"Create Space",value:"create"},{label:"Update Space",value:"update"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"create",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const substrateApi = await api.subsocial.substrate.api\n  const spaceTransaction = substrateApi.tx.spaces.createSpace(\n    null, // Parent Id (optional)\n    null, // Handle name (optional)\n    IpfsContent(cid),\n    null // Permissions config (optional)\n  )\n"))),Object(o.b)(l.a,{value:"update",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const substrateApi = await api.subsocial.substrate.api\n  const update = new SpaceUpdate({\n    content: IpfsContent(cid),\n    hidden: OptionBool(true),\n  })\n\n  const spaceTransaction = substrateApi.tx.spaces.updateSpace('1', update)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchains"),Object(o.b)(u,{variableName:"spaceTransaction",mdxType:"TransactionSnippet"}),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/spaces/creating-spaces"},"here"),"."),Object(o.b)("h3",{id:"post-1"},"Post"),Object(o.b)("p",null,"Add following import statement: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'  import {\n    IpfsContent, \n    OptionBool,\n    SpaceUpdate\n  } from "@subsocial/types/substrate/classes" \n')),Object(o.b)("p",null,"Storing post details in IPFS, and generating a CID."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const ipfsImageCid = await api.subsocial.ipfs.saveFile(file)\n\n  const cid = await ipfs.saveContent({\n    title: \"What is Subsocial?\",\n    image: ipfsImageCid,\n    tags: [ 'Hello world', 'FAQ' ],\n    body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n  })\n")),Object(o.b)("p",null,"Creating a post transaction object"),Object(o.b)(c.a,{defaultValue:"regular",values:[{label:"Regular Post",value:"regular"},{label:"Shared Post",value:"shared"},{label:"Update Post",value:"update"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"regular",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = '1' // The space in which you're posting.\n  const substrateApi = await api.subsocial.substrate.api\n  const postTransaction = substrateApi.tx.posts.createPost(\n    spaceId, \n    { RegularPost: null }, // Creates a regular post.\n    IpfsContent(cid)\n  )\n"))),Object(o.b)(l.a,{value:"shared",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = '1' // The space in which you're posting.\n  const parentPostId = '2' // The original post you want to share.\n\n  // Creating new sharedPostCid having shared message.\n  const sharedPostCid = await ipfs.saveContent({\n    body: 'Keep up the good work!'\n  })\n\n  const substrateApi = await api.subsocial.substrate.api\n  const postTransaction = substrateApi.tx.posts.createPost(\n    spaceId, \n    { SharedPost: parentPostId }, // Creates a shared post.\n    IpfsContent(sharedPostCid)\n  )\n"))),Object(o.b)(l.a,{value:"update",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const postId = '7' // Id of post which you want to update.\n  const substrateApi = await api.subsocial.substrate.api\n\n  const update = new PostUpdate({\n    content: IpfsContent(cid),\n    hidden: OptionBool(true),\n  })\n\n  const postTransaction = substrateApi.tx.spaces.posts.updatePost(postId, update)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchain"),Object(o.b)(u,{variableName:"postTransaction",mdxType:"TransactionSnippet"}),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/posts/creating-posts"},"here"),"."),Object(o.b)("h3",{id:"profile-1"},"Profile"),Object(o.b)("p",null,"Add the following import statement:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'  import { IpfsContent } from "@subsocial/types/substrate/classes"\n')),Object(o.b)("p",null,"Storing profile details in IPFS, and generating a CID to add on blockchain:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const ipfsImageCid = await api.subsocial.ipfs.saveFile(file)\n  const cid = await ipfs.saveContent({\n    about: 'Subsocial official account.',\n    avatar: ipfsImageCid,\n    name: 'Subsocial',\n  })\n")),Object(o.b)("p",null,"Creating profile transaction object:"),Object(o.b)(c.a,{defaultValue:"createprofile",values:[{label:"Create Profile",value:"createprofile"},{label:"Update Profile",value:"updateprofile"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"createprofile",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const substrateApi = await api.subsocial.substrate.api\n  const profileTransaction = substrateApi.tx.profiles.createProfile(\n    IpfsContent(cid)\n  )\n"))),Object(o.b)(l.a,{value:"updateprofile",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const update = { content: IpfsContent(cid) }\n  const profileTransaction = substrateApi.tx.profiles.updateProfile(update)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchain"),Object(o.b)(u,{variableName:"profileTransaction",mdxType:"TransactionSnippet"}),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/profiles/creating-profiles"},"here"),"."),Object(o.b)("h2",{id:"comments"},"Comments"),Object(o.b)("p",null,"Comments are replies to a post that are visible below a post."),Object(o.b)("h3",{id:"reading-comments"},"Reading Comments"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { idToBn } from \"@subsocial/utils\"\n\n  const substrate = flatApi.subsocial.substrate\n  const postId = '1'\n\n  // Get reply ids (comments) by parent post id and fetch posts by ids\n  const replyIds = await substrate.getReplyIdsByPostId(idToBn(postId))\n\n  // For getting comments use posts functions\n  const replies = await flatApi.findPublicPosts(replyIds)\n")),Object(o.b)("h3",{id:"writing-comments"},"Writing Comments"),Object(o.b)(c.a,{defaultValue:"commentToPost",values:[{label:"Create Profile",value:"commentToPost"},{label:"Update Profile",value:"replyToComment"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"commentToPost",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n  const spaceId = '1' // Optional.\n  const rootPostId = '1'\n  const cid = await ipfs.saveContent({\n    body: 'Keep up the good work!'\n  })\n\n  const substrateApi = flatApi.subsocial.substrate\n\n  const tx = await substrateApi.tx.posts.createPost(spaceId, { Comment: { parentId: null, rootPostId}}, IpfsContent(cid))\n"))),Object(o.b)(l.a,{value:"replyToComment",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n  const spaceId = '1' // Optional.\n  const parentId = '2' // Parent comment id.\n  const rootPostId = '1'\n  const cid = await ipfs.saveContent({\n    body: 'Agree' // Reply message.\n  })\n\n  const substrateApi = flatApi.subsocial.substrate\n\n  const tx = substrateApi.tx.posts.createPost(spaceId, { Comment: { parentId, rootPostId}}, IpfsContent(cid))\n")))),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/comments/getting-comments"},"here"),"."),Object(o.b)("h2",{id:"follows"},"Follows"),Object(o.b)("h3",{id:"check-if-follower"},"Check if follower"),Object(o.b)("p",null,"This checks if an account is following a particular space."),Object(o.b)(c.a,{defaultValue:"isSpaceFollower",values:[{label:"Is Space Follower",value:"isSpaceFollower"},{label:"Is Account Follower",value:"isAccountFollower"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"isSpaceFollower",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const accountId = '<any_public_key>'\n  const spaceId = '1'\n\n  const substrateApi = flatApi.subsocial.substrate\n  const isFollower = await substrateApi.isSpaceFollower(accountId, spaceId)\n"))),Object(o.b)(l.a,{value:"isAccountFollower",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const yourAccountId = '<any_public_key>'\n  const otherAccountId = '<any_public_key>'\n\n  const substrateApi = flatApi.subsocial.substrate\n  const isFollower = await substrateApi.isAccountFollower(yourAccountId, otherAccountId)\n")))),Object(o.b)("h3",{id:"fetch-list-of-followers"},"Fetch list of followers"),Object(o.b)("h4",{id:"for-spaces"},"For Spaces"),Object(o.b)(c.a,{defaultValue:"spacefollowers",values:[{label:"By Space Id",value:"spacefollowers"},{label:"Followed by Account Id",value:"replyToComment"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"spacefollowers",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { bnsToIds } from '@subsocial/utils'\n\n  const spaceId = '1'\n  const substrateApi = flatApi.subsocial.substrate\n  const res = await (await substrateApi.api).query.spaceFollows.spaceFollowers(spaceId)\n  const followersSpaceIds = bnsToIds(res)\n"))),Object(o.b)(l.a,{value:"replyToComment",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { bnsToIds } from '@subsocial/utils'\n\n  const accountId = '<any_public_key>'\n  const substrateApi = flatApi.subsocial.substrate\n  const res = await (await substrateApi.api).query.spaceFollows.spacesFollowedByAccount(accountId)\n  const followedSpaceIds = bnsToIds(res)\n")))),Object(o.b)("h4",{id:"for-accounts"},"For Accounts"),Object(o.b)(c.a,{defaultValue:"spacefollowers",values:[{label:"Followers",value:"spacefollowers"},{label:"Following",value:"replyToComment"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"spacefollowers",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { bnsToIds } from '@subsocial/utils'\n\n  const accountId = '<any_public_key>'\n  const substrateApi = flatApi.subsocial.substrate\n  const res = await (await substrateApi.api).query.profileFollows.accountFollowers(accountId)\n  const followersOfAccount = bnsToIds(res)\n"))),Object(o.b)(l.a,{value:"replyToComment",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { bnsToIds } from '@subsocial/utils'\n\n  const accountId = '<any_public_key>'\n  const substrateApi = flatApi.subsocial.substrate\n  const res = await (await substrateApi.api).query.profileFollows.accountsFollowedByAccount(accountId)\n  const followingOfAccount = bnsToIds(res)\n")))),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/follow/getting-follow"},"here"),"."),Object(o.b)("h3",{id:"follow--unfollow"},"Follow / Unfollow"),Object(o.b)("h4",{id:"for-spaces-1"},"For Spaces"),Object(o.b)(c.a,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"spacefollowers",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = '1'\n  const substrateApi = flatApi.subsocial.substrate\n  const tx = substrateApi.tx.spaceFollows.followSpace(spaceId)\n"))),Object(o.b)(l.a,{value:"replyToComment",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const spaceId = '1'\n  const substrateApi = flatApi.subsocial.substrate\n  const tx = substrateApi.tx.spaceFollows.unfollowSpace(spaceId)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchain"),Object(o.b)(u,{variableName:"tx",mdxType:"TransactionSnippet"}),Object(o.b)("h4",{id:"for-accounts-1"},"For Accounts"),Object(o.b)(c.a,{defaultValue:"spacefollowers",values:[{label:"Follow",value:"spacefollowers"},{label:"Unfollow",value:"replyToComment"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"spacefollowers",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const accountIdToFollow = '<any_public_key>'\n  const substrateApi = flatApi.subsocial.substrate\n  const tx = substrateApi.tx.profileFollows.followAccount(accountIdToFollow)\n"))),Object(o.b)(l.a,{value:"replyToComment",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const accountIdToFollow = '<any_public_key>'\n  const substrateApi = flatApi.subsocial.substrate\n  const tx = substrateApi.tx.profileFollows.followAccount(accountIdToFollow)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchain"),Object(o.b)(u,{variableName:"tx",mdxType:"TransactionSnippet"}),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/follow/following"},"here"),"."),Object(o.b)("h2",{id:"reactions"},"Reactions"),Object(o.b)("p",null,"Reactions are your signs to ",Object(o.b)("inlineCode",{parentName:"p"},"Upvote")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Downvote")," a post."),Object(o.b)("h3",{id:"get-all-reactions"},"Get all reactions"),Object(o.b)(c.a,{defaultValue:"single",values:[{label:"Single Reaction",value:"single"},{label:"Multiple Reactions",value:"multi"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"single",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const myAccount = '<any_account_public_key>';\n  const reaction = await flatApi.substrate.getPostReactionIdByAccount (myAccount, '1')\n"))),Object(o.b)(l.a,{value:"multi",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  import { ReactionId } from '@subsocial/types/substrate/interfaces';\n  \n  const myAccount = '<any_account_public_key>';\n\n  const substrate = await flatApi.subsocial.substrate\n  const substrateApi = await flatApi.subsocial.substrate.api\n  \n  const tuples = [ '1', '2', '3' ].map(postId => [ myAccount, postId ])\n  \n  const reactionIds = await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n  const reactions = await substrate.findReactions(reactionIds as ReactionId[])\n")))),Object(o.b)("h3",{id:"reacting-to-a-post"},"Reacting to a post"),Object(o.b)(c.a,{defaultValue:"createReaction",values:[{label:"Create",value:"createReaction"},{label:"Update",value:"updateReaction"},{label:"Delete",value:"deleteReaction"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"createReaction",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const postId = '1' // Post Id you want to react on.\n  const substrateApi = flatApi.subsocial.substrate\n\n  const reactionTx = substrateApi.tx.reactions.createPostReaction(postId, 'Upvote')\n"))),Object(o.b)(l.a,{value:"updateReaction",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const postId = '1' // Post Id you want to update reaction on.\n  const reactionId = '2' // Reaction Id to update.\n  const substrateApi = flatApi.subsocial.substrate\n\n  const reactionTx = substrateApi.tx.reactions.updatePostReaction(postId, reactionId, 'Downvote')\n"))),Object(o.b)(l.a,{value:"deleteReaction",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"  const postId = '1' // Post Id on which reaction you want to delete reaction.\n  const reactionId = '2' // Reaction Id to delete.\n  const substrateApi = flatApi.subsocial.substrate\n\n  const reactionTx = substrateApi.tx.reactions.deletePostReaction(postId, reactionId)\n")))),Object(o.b)("p",null,"Signing a transaction and sending to blockchain"),Object(o.b)(u,{variableName:"tx",mdxType:"TransactionSnippet"}),Object(o.b)("p",null,"Check full docs ",Object(o.b)("a",{parentName:"p",href:"/docs/sdk/quick-start/reactions/creating-reactions"},"here"),"."))}m.isMDXComponent=!0}}]);