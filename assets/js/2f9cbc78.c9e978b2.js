(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{142:function(t,e,n){"use strict";n.d(e,"a",(function(){return l})),n.d(e,"b",(function(){return f}));var r=n(0),a=n.n(r);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},s=Object.keys(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=a.a.createContext({}),u=function(t){var e=a.a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=u(t.components);return a.a.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},b=a.a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,s=t.originalType,o=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),l=u(n),b=r,f=l["".concat(o,".").concat(b)]||l[b]||d[b]||s;return n?a.a.createElement(f,c(c({ref:e},p),{},{components:n})):a.a.createElement(f,c({ref:e},p))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=n.length,o=new Array(s);o[0]=b;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:r,o[1]=c;for(var p=2;p<s;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},87:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return o})),n.d(e,"metadata",(function(){return c})),n.d(e,"toc",(function(){return i})),n.d(e,"default",(function(){return u}));var r=n(3),a=n(7),s=(n(0),n(142)),o={id:"transactions",title:"Transactions"},c={unversionedId:"sdk/quick-start/transactions",id:"sdk/quick-start/transactions",isDocsHomePage:!1,title:"Transactions",description:"Spaces, posts and other structures can be created or updated using transactions.",source:"@site/docs/sdk/quick-start/Transactions.md",slug:"/sdk/quick-start/transactions",permalink:"/docs/sdk/quick-start/transactions",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/Transactions.md",version:"current",sidebar:"someSidebar",previous:{title:"How to connect to Subsocial",permalink:"/docs/sdk/quick-start/connection"},next:{title:"What is Space?",permalink:"/docs/sdk/quick-start/spaces/overview"}},i=[],p={toc:i};function u(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Spaces, posts and other structures can be created or updated using ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions"),"."),Object(s.b)("p",null,"Let's start with an example of creating a space:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { getSubstrateApi } from '@subsocial/api'\nimport { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst createSpace = async () => {\n  const substrateApi = await getSubstrateApi({ endpoint: 'http://127.0.0.1:9944' }) // or const substrateApi = await flatApi.subsocial.substrate.api\n  const ipfs = await flatApi.subsocial.ipfs\n  \n  //create content \n  const cid = await ipfs.saveContent({\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n    image: 'Qmasp4JHhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe', // ipfsImageCid = await flatApi.subsocial.ipfs.saveFile(file)\n    name: 'Subsocial',\n    tags: ['subsocial']\n  })\n\n  const tx = substrateApi.tx.spaces.createSpace(\n    null,\n    null,\n    IpfsContent(cid),\n    null\n  )\n\n  const accountPair = keyring.addFromMnemonic('your mnemonic')\n\n  tx.signAndSend(accountPair, async (result) => {\n    const { status } = result;\n\n    if (!result || !status) {\n      return;\n    }\n\n    if (status.isFinalized || status.isInBlock) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      \n      console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n    } else {\n      console.log(`\u23f1 Current tx status: ${status.type}`);\n    }\n  });\n}\n")),Object(s.b)("p",null,"Fist we created instance of the Keayring class (lean more about keyring ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/keyring/start/"},"here"),") ,\nIn the next step  we connected to substrate API using getSubstrateApi and substrate node url, also we connected to ipfs by flatApi.\nAfter that we can use ipfs for creating content and substrateApi. We use the previously created content to create a space and then conduct a transaction."),Object(s.b)("p",null,"Lear more about ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions")," and ",Object(s.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/util-crypto/examples/create-mnemonic"},"mnemonic")," "))}u.isMDXComponent=!0}}]);