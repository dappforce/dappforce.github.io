(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(162)),c={id:"getting-reactions",title:"Getting Reactions"},s={unversionedId:"sdk/quick-start/reactions/getting-reactions",id:"sdk/quick-start/reactions/getting-reactions",isDocsHomePage:!1,title:"Getting Reactions",description:"Find and load an array of information about reactions from the Subsocial blockchain by a given array of IDs.",source:"@site/docs/sdk/quick-start/reactions/GettingReactions.md",slug:"/sdk/quick-start/reactions/getting-reactions",permalink:"/docs/sdk/quick-start/reactions/getting-reactions",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/reactions/GettingReactions.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating And Updating Comments",permalink:"/docs/sdk/quick-start/comments/creating-comments"},next:{title:"Creating, Updating, And Deleting Reactions",permalink:"/docs/sdk/quick-start/reactions/creating-reactions"}},i=[{value:"Get reaction IDs",id:"get-reaction-ids",children:[]},{value:"Get reactions",id:"get-reactions",children:[{value:"Example",id:"example",children:[]}]},{value:"Get a reaction by post ID and account",id:"get-a-reaction-by-post-id-and-account",children:[]}],p={toc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Find and load an array of information about reactions from the Subsocial blockchain by a given array of IDs."),Object(o.b)("h2",{id:"get-reaction-ids"},"Get reaction IDs"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"query")," allows for the querying of multiple storage entries and the combination into a single result.\nThis is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription."),Object(o.b)("h2",{id:"get-reactions"},"Get reactions"),Object(o.b)("p",null,"Get reactions (upvotes/downvotes) on posts or comments by reaction IDs (use multi request from blockchain)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"substrateApi.findReactions(ids: AnyReactionId[]): Promise<Reaction[]>\nsubstrateApi.findReaction(id: AnyReactionId): Promise<Reaction | undefined>\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(o.b)("em",{parentName:"a"},"ReactionId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"Reaction"))),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { ReactionId } from '@subsocial/types/substrate/interfaces';\n  \nconst myAccount = '3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8';\n\nconst example = async () =>  {\n  const substrate = await flatApi.subsocial.substrate\n  const substrateApi = await flatApi.subsocial.substrate.api\n  \n  const tuples = [ '1', '2', '3' ].map(postId => [ myAccount, postId ])\n  \n  const reactionIds = await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n  const reactions = await substrate.findReactions(reactionIds as ReactionId[])\n}\n")),Object(o.b)("h2",{id:"get-a-reaction-by-post-id-and-account"},"Get a reaction by post ID and account"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"substrateApi.getPostReactionIdByAccount(accountId: AnyAccountId, postId: AnyPostId): Promise<ReactionId | undefined>\n")),Object(o.b)("p",null,"Example: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.substrate.getPostReactionIdByAccount('3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8', '1')\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(o.b)("em",{parentName:"a"},"ReactionId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(o.b)("em",{parentName:"a"},"PostId"))," | ",Object(o.b)("em",{parentName:"p"},"BN"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(o.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(o.b)("em",{parentName:"a"},"ReactionId")))))}b.isMDXComponent=!0},162:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(c,".").concat(d)]||u[d]||l[d]||o;return n?r.a.createElement(m,s(s({ref:t},p),{},{components:n})):r.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var p=2;p<o;p++)c[p]=n[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);