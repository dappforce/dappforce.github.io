(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{159:function(t,e,a){"use strict";a.d(e,"a",(function(){return l})),a.d(e,"b",(function(){return m}));var n=a(0),r=a.n(n);function s(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){s(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},s=Object.keys(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var b=r.a.createContext({}),i=function(t){var e=r.a.useContext(b),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},l=function(t){var e=i(t.components);return r.a.createElement(b.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},u=r.a.forwardRef((function(t,e){var a=t.components,n=t.mdxType,s=t.originalType,o=t.parentName,b=p(t,["components","mdxType","originalType","parentName"]),l=i(a),u=n,m=l["".concat(o,".").concat(u)]||l[u]||d[u]||s;return a?r.a.createElement(m,c(c({ref:e},b),{},{components:a})):r.a.createElement(m,c({ref:e},b))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var s=a.length,o=new Array(s);o[0]=u;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=t,c.mdxType="string"==typeof t?t:n,o[1]=c;for(var b=2;b<s;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},94:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return o})),a.d(e,"metadata",(function(){return c})),a.d(e,"toc",(function(){return p})),a.d(e,"default",(function(){return i}));var n=a(3),r=a(7),s=(a(0),a(159)),o={id:"creating-posts",title:"Creating And Updating Posts"},c={unversionedId:"sdk/quick-start/posts/creating-posts",id:"sdk/quick-start/posts/creating-posts",isDocsHomePage:!1,title:"Creating And Updating Posts",description:"Create A Post",source:"@site/docs/sdk/quick-start/posts/CreatingPosts.md",slug:"/sdk/quick-start/posts/creating-posts",permalink:"/docs/sdk/quick-start/posts/creating-posts",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/posts/CreatingPosts.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Posts",permalink:"/docs/sdk/quick-start/posts/getting-posts"},next:{title:"Posts With Details",permalink:"/docs/sdk/quick-start/posts/posts-with-details"}},p=[{value:"Create A Post",id:"create-a-post",children:[{value:"A Regular Post",id:"a-regular-post",children:[]},{value:"A Shared Post",id:"a-shared-post",children:[]}]},{value:"Update A Post",id:"update-a-post",children:[]}],b={toc:p};function i(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(s.b)("wrapper",Object(n.a)({},b,a,{components:e,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"create-a-post"},"Create A Post"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"substrateApi.tx.posts.createPost(spaceIdOpt, extension, content)\n")),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Params"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"spaceIdOpt")),Object(s.b)("td",{parentName:"tr",align:null},"The space where a post will be published.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"extension")),Object(s.b)("td",{parentName:"tr",align:null},"A kind of post. It can be a regular post, a shared post or a comment.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"content")),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"IpfsContent"),' is a function that returns a substrate like implementation for enum { IPFS: "CID of your content"}.')))),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(s.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postextensionenum"},"PostExtensionEnum"),": ",Object(s.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/classes/regularpost.html"},Object(s.b)("em",{parentName:"a"},"RegularPost"))," | ",Object(s.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.comment.html"},Object(s.b)("em",{parentName:"a"},"Comment"))," | ",Object(s.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/classes/sharedpost.html"},Object(s.b)("em",{parentName:"a"},"SharedPost")))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Examples:")),Object(s.b)("h3",{id:"a-regular-post"},"A Regular Post"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  title: \"What is Subsocial?\",\n  image: \"QmcWWpR176oFao49jrLHUoH3R9MCziE5d77fdD8qdoiinx\",\n  tags: [ 'Hello world', 'FAQ' ],\n  body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { RegularPost: null}, IpfsContent(cid))\n\n...\n")),Object(s.b)("h3",{id:"a-shared-post"},"A Shared Post"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst tx = substrateApi.tx.posts.createPost('1', { SharedPost: '1'}, IpfsContent(cid))\n...\n}\n")),Object(s.b)("h2",{id:"update-a-post"},"Update A Post"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"substrateApi.tx.posts.updatePost(postId: AnyPostId, update: PostUpdateType)\n")),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Params"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"postId")),Object(s.b)("td",{parentName:"tr",align:null},"The ID of the current space.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"update")),Object(s.b)("td",{parentName:"tr",align:null},"The fields available to be updated.")))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Update properties")),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Properties"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"spaceId?")),Object(s.b)("td",{parentName:"tr",align:null},"If a new spaceId is provided, it will move this post to the new space.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"content?")),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"IpfsContent"),' is a function that returns a substrate like implementation for enum { IPFS: "CID of your content"}.')),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("em",{parentName:"td"},"hidden?")),Object(s.b)("td",{parentName:"tr",align:null},"boolean, if post is hidden from other users.")))),Object(s.b)("p",null,"Example:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import {\n  IpfsContent, \n  OptionBool,\n  PostUpdate\n} from \"@subsocial/types/substrate/classes\"\n\n...\nconst cid = await ipfs.saveContent({\n  title: \"What is Subsocial?\",\n  image: \"QmcWWpR176oFao49jrLHUoH3R9MCziE5d77fdD8qdoiinx\",\n  tags: ['Hello world', 'FAQ', 'Subsoical'], //updated field\n  body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n})\n\nconst update = new PostUpdate({\n  content: IpfsContent(cid),\n  hidden: OptionBool(true),\n})\n\nconst tx = substrateApi.tx.spaces.posts.updatePost('1', update)\n...\n")))}i.isMDXComponent=!0}}]);