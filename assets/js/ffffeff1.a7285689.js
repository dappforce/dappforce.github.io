"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[4684],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,s(s({ref:t},l),{},{components:n})):a.createElement(g,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7550:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(3117),o=(n(7294),n(3905));const r={id:"transactions",title:"Signing & Sending Transactions",displayed_sidebar:"developSidebar"},s=void 0,i={unversionedId:"develop/how-to-guides/transactions",id:"develop/how-to-guides/transactions",title:"Signing & Sending Transactions",description:"This section covers how to sign and send transactions on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/Transactions.md",sourceDirName:"develop/how-to-guides",slug:"/develop/how-to-guides/transactions",permalink:"/docs/develop/how-to-guides/transactions",draft:!1,editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/Transactions.md",tags:[],version:"current",frontMatter:{id:"transactions",title:"Signing & Sending Transactions",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Connect To Subsocial",permalink:"/docs/develop/how-to-guides/connectToSubsocial"},next:{title:"Fetch Profiles",permalink:"/docs/develop/how-to-guides/profiles/fetch-profiles"}},c={},p=[{value:"Creating a Space",id:"creating-a-space",level:2},{value:"More examples",id:"more-examples",level:2},{value:"Create a vote reaction",id:"create-a-vote-reaction",level:4},{value:"Start following a space",id:"start-following-a-space",level:4}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This section covers how to sign and send transactions on the Subsocial blockchain.")),(0,o.kt)("p",null,"All posts and spaces are associated with public key pairs called accounts.\nSo, these structures can be created or updated via ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions"),". And you need to use a wallet / extension to sign these transactions. Therefore, Subsocial supports the ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/extension/"},"Polkadot {.js} extension"),", which allows you to easily manage your keys in a browser."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you are new to the Polkadot ecosystem and want help to understand the Polkadot{.js} extension, read this ",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorials/"},"doc"),".")),(0,o.kt)("h2",{id:"creating-a-space"},"Creating a Space"),(0,o.kt)("p",null,"You need to add 2 more dependencies for this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  yarn add @polkadot/keyring @polkadot/wasm-crypto\n")),(0,o.kt)("p",null,"Let's start with an example of creating a space:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\n// Create a keyring instance.\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst createSpace = async () => {\n  // wait initialize wasm.\n  await waitReady()\n  \n  const substrateApi = await api.substrateApi\n  const ipfs = api.ipfs\n  \n  // create content object on IPFS and get CID.\n  const ipfsImageCid = await ipfs.saveFile(file)\n\n  const cid = await ipfs.saveContent({\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n    image: ipfsImageCid,\n    name: 'Subsocial',\n    tags: ['subsocial']\n  })\n\n  /* Creating a transaction for the createSpace method.\n   createSpace(\n    content: string or IPFS CID or any other (required),\n    permissions: optional\n   )\n  */\n  const tx = substrateApi.tx.spaces.createSpace(\n    IpfsContent(cid),\n    null\n  )\n\n  // Add your mnemonic in a config file and import it from there.\n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  // Signing the transaction and sending for execution.\n  tx.signAndSend(accountPair, async (result) => {\n    const { status } = result;\n\n    if (!result || !status) {\n      return;\n    }\n\n    if (status.isFinalized || status.isInBlock) {\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n      \n      console.log(`\u2705 Tx finalized. Block hash: ${blockHash.toString()}`);\n    } else if (result.isError) {\n      console.log(JSON.stringify(result));\n    } else {\n      console.log(`\u23f1 Current tx status: ${status.type}`);\n    }\n  });\n}\n")),(0,o.kt)("p",null,"Fist we created an instance of the Keyring class (lean more about keyrings ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/keyring/start/"},"here"),").\nAfter that we used substrateAPI and IPFS for creating content. Then, we used the previously created content to create a space and then sign a transaction."),(0,o.kt)("p",null,"Learn more about ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/api.tx/"},"transactions")," and ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/util-crypto/examples/create-mnemonic"},"mnemonics"),". "),(0,o.kt)("h2",{id:"more-examples"},"More examples"),(0,o.kt)("h4",{id:"create-a-vote-reaction"},"Create a vote reaction"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/types/substrate/classes'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst makeUpvote = async () => {\n  await waitReady()\n\n  const substrateApi = await api.substrateApi\n\n  /*\n    createPostReaction(\n      postId: number | string,\n      kind: 'Upvote' | 'Downvote' | number\n    )\n  */\n  const tx = substrateApi.tx.reactions.createPostReaction('1', 'Upvote')\n\n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  tx.signAndSend(accountPair);\n}\n")),(0,o.kt)("h4",{id:"start-following-a-space"},"Start following a space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IpfsContent } from '@subsocial/api/types/substrate/wrappers'\nimport { Keyring } from '@polkadot/keyring'\nimport { waitReady } from '@polkadot/wasm-crypto'\n\nconst keyring = new Keyring({ type: 'sr25519' })\n\nconst followSpace = async () => {\n  await waitReady()\n\n  const substrateApi = await api.substrateApi\n\n  /*\n    followSpace(\n      spaceId: u64 | number\n    )\n  */\n  const tx = substrateApi.tx.spaceFollows.followSpace(1)\n  \n  const accountPair = keyring.addFromMnemonic('add your mnemonic here')\n\n  tx.signAndSend(accountPair);\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more convenient work with accounts and keys, use ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/extension/usage"},"the polkadot.{js} extension"),".")))}d.isMDXComponent=!0}}]);