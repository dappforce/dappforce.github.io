"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[8104],{5788:(e,t,n)=>{n.d(t,{Iu:()=>l,yg:()=>g});var r=n(1504);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,g=d["".concat(c,".").concat(u)]||d[u]||w[u]||a;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>w,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(5072),o=(n(1504),n(5788));const a={id:"fetching-tweet",title:"Fetching Tweets",displayed_sidebar:"developSidebar"},i=void 0,s={unversionedId:"develop/zero-to-hero/twitter-dapp/fetching-tweet",id:"develop/zero-to-hero/twitter-dapp/fetching-tweet",title:"Fetching Tweets",description:"Now that we have added the logics to create a new tweet, it's time to fetch all the tweets in the UI list we created earlier:",source:"@site/docs/develop/zero-to-hero/twitter-dapp/FetchingTweets.md",sourceDirName:"develop/zero-to-hero/twitter-dapp",slug:"/develop/zero-to-hero/twitter-dapp/fetching-tweet",permalink:"/docs/develop/zero-to-hero/twitter-dapp/fetching-tweet",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/zero-to-hero/twitter-dapp/FetchingTweets.md",tags:[],version:"current",frontMatter:{id:"fetching-tweet",title:"Fetching Tweets",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Creating a Tweet",permalink:"/docs/develop/zero-to-hero/twitter-dapp/creating-tweet"},next:{title:"Liking a Tweet",permalink:"/docs/develop/zero-to-hero/twitter-dapp/like-tweet"}},c={},p=[{value:"Fetching tweets",id:"fetching-tweets",level:3}],l={toc:p},d="wrapper";function w(e){let{components:t,...a}=e;return(0,o.yg)(d,(0,r.c)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Now that we have added the logics to create a new tweet, it's time to fetch all the tweets in the UI list we created earlier:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Tweet UI",src:n(5108).c,width:"1634",height:"266"})),(0,o.yg)("h3",{id:"fetching-tweets"},"Fetching tweets"),(0,o.yg)("p",null,"To fetch tweets, we can simply use the ",(0,o.yg)("strong",{parentName:"p"},"findPosts")," method of the ",(0,o.yg)("strong",{parentName:"p"},"api"),"."),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"  const spaceIdForTweets = '1059'\n  const tweetIds = await api.blockchain.postIdsBySpaceId(spaceIdForTweets)\n\n  const tweets = await api.base.findPosts({ids: tweetIds})\n")),(0,o.yg)("p",null,"Now, lets put this logic inside a useEffect hook on the ",(0,o.yg)("strong",{parentName:"p"},"home.tsx")," file."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"  const HomeScreen = () => {\n    // ...\n\n    const [tweets, setTweets] = useState<ITweet[]>([])\n\n    const { api, isReady } = useContext(SubsocialContext)\n\n    const fetchTweets = async () => {\n      if (!api) return;\n\n      const spaceIdForTweets = '1059'\n      const tweetIds = await api.blockchain.postIdsBySpaceId(spaceIdForTweets)\n\n      const tweets = await api.base.findPosts({ ids: tweetIds })\n      console.log(tweets)\n      setTweets(tweets.map((tw) => {\n        const t: ITweet = {}\n        t.id = tw.struct.id.toString();\n        t.description = tw.content?.body;\n        t.name = tw.content?.title; \n        t.avatar = 'https://i.pravatar.cc/300';\n        t.likes = tw.struct.upvotesCount.toNumber();\n        return t;\n      }))\n    }\n\n    useEffect(() => {\n      fetchTweets()\n    }, [isReady])\n\n    // ...\n  }\n")))}w.isMDXComponent=!0},5108:(e,t,n)=>{n.d(t,{c:()=>r});const r=n.p+"assets/images/tweet-7a8d692e3a1106b18c32206b93322c36.png"}}]);