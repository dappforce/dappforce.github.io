(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{143:function(e,t,s){"use strict";s.d(t,"a",(function(){return b})),s.d(t,"b",(function(){return u}));var a=s(0),n=s.n(a);function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function o(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function l(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?o(Object(s),!0).forEach((function(t){i(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,a,n=function(e,t){if(null==e)return{};var s,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)s=i[a],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)s=i[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var d=n.a.createContext({}),c=function(e){var t=n.a.useContext(d),s=t;return e&&(s="function"==typeof e?e(t):l(l({},t),e)),s},b=function(e){var t=c(e.components);return n.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var s=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),b=c(s),m=a,u=b["".concat(o,".").concat(m)]||b[m]||p[m]||i;return s?n.a.createElement(u,l(l({ref:t},d),{},{components:s})):n.a.createElement(u,l({ref:t},d))}));function u(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=s.length,o=new Array(i);o[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=s[d];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,s)}m.displayName="MDXCreateElement"},82:function(e,t,s){"use strict";s.r(t),s.d(t,"frontMatter",(function(){return o})),s.d(t,"metadata",(function(){return l})),s.d(t,"toc",(function(){return r})),s.d(t,"default",(function(){return c}));var a=s(3),n=s(7),i=(s(0),s(143)),o={id:"posts-with-details",title:"Post with details"},l={unversionedId:"sdk/quick-start/posts/posts-with-details",id:"sdk/quick-start/posts/posts-with-details",isDocsHomePage:!1,title:"Post with details",description:"All entities (posts, profiles, spaces) are interconnected. For faster data retrieval use",source:"@site/docs/sdk/quick-start/posts/PostWithDetails.md",slug:"/sdk/quick-start/posts/posts-with-details",permalink:"/docs/sdk/quick-start/posts/posts-with-details",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/posts/PostWithDetails.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating and updating",permalink:"/docs/sdk/quick-start/posts/creating-posts"},next:{title:"What is Comment (replies)?",permalink:"/docs/sdk/quick-start/comments/overview"}},r=[{value:"Find and load a single post",id:"find-and-load-a-single-post",children:[{value:"findPostWithAllDetails",id:"findpostwithalldetails",children:[]},{value:"findPostWithSomeDetails",id:"findpostwithsomedetails",children:[]}]},{value:"Find and load an array of posts",id:"find-and-load-an-array-of-posts",children:[{value:"findPostsWithAllDetails",id:"findpostswithalldetails",children:[]},{value:"findPublicPostsWithAllDetails",id:"findpublicpostswithalldetails",children:[]},{value:"findUnlistedPostsWithAllDetails",id:"findunlistedpostswithalldetails",children:[]},{value:"findPublicPostsWithSomeDetails",id:"findpublicpostswithsomedetails",children:[]}]}],d={toc:r};function c(e){var t=e.components,s=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"All entities (posts, profiles, spaces) are interconnected. For faster data retrieval use\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"findPostWithAllDetails")," method."),Object(i.b)("h2",{id:"find-and-load-a-single-post"},"Find and load a single post"),Object(i.b)("h3",{id:"findpostwithalldetails"},"findPostWithAllDetails"),Object(i.b)("p",null,"Find and load post with their extension and owner's profile and space (if defined)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findPostWithAllDetails(id: AnyPostId): Promise<PostWithAllDetails | undefined>\n")),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithAllDetails('1')\n")),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": {"id": "3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8"...},\n  "space": {"id": "1"...}\n}\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(i.b)("em",{parentName:"a"},"PostId"))," | ",Object(i.b)("em",{parentName:"p"},"BN"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(i.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(i.b)("em",{parentName:"a"},"PostWithSpace")))),Object(i.b)("h3",{id:"findpostwithsomedetails"},"findPostWithSomeDetails"),Object(i.b)("p",null,"Find and load post with their extension and owner's profile (if defined)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findPostWithSomeDetails(query: FindPostWithDetailsQuery): Promise<PostWithSomeDetails | undefined>\n")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ids")," - An array of ids of desired structs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for visible state of the structs (\nsee ",Object(i.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withContentOnly?"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withSpace?")," - Pass ",Object(i.b)("inlineCode",{parentName:"li"},"true")," to get space data."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withOwner?")," - Pass ",Object(i.b)("inlineCode",{parentName:"li"},"true")," to get profile data.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),": 'onlyVisible' | 'onlyHidden' | 'onlyPublic' | 'onlyUnlisted'"),Object(i.b)("p",{parentName:"blockquote"},"The four visible state filters correspond to the next conditions:"),Object(i.b)("ul",{parentName:"blockquote"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onlyVisible")," \u2013 returns posts where ",Object(i.b)("inlineCode",{parentName:"li"},"hidden")," field on corresponding Substrate struct is ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onlyHidden")," \u2013 returns posts where ",Object(i.b)("inlineCode",{parentName:"li"},"hidden")," field on corresponding Substrate struct is ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onlyPublic")," \u2013 returns posts where ",Object(i.b)("inlineCode",{parentName:"li"},"hidden")," field on corresponding Substrate struct is ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"\nand there is a corresponding JSON file on IPFS."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onlyUnlisted")," \u2013 returns posts where either the ",Object(i.b)("inlineCode",{parentName:"li"},"hidden")," field is ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"\nor there is a no corresponding JSON file on IPFS."))),Object(i.b)("p",null,"Example: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithSomeDetails({id: '1'})\n")),Object(i.b)("p",null,"Output: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": undefined,\n  "space": undefined\n}\n')),Object(i.b)("p",null,"Example with owner: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.findPostWithSomeDetails({id: '1', withOwner: true})\n")),Object(i.b)("p",null,"Output: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'{\n  "ext": undefined,\n  "id": "1",\n  "post": {"id": "1"...},\n  "owner": {"id": "3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8"...},\n  "space": undefined\n}\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},"PostWithSomeDetails"),": { ext?: ",Object(i.b)("em",{parentName:"p"},"Exclude"),"<",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},Object(i.b)("em",{parentName:"a"},"PostWithSomeDetails")),', "ext">; owner?: ',Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#profiledata"},Object(i.b)("em",{parentName:"a"},"ProfileData")),"; post: ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postdata"},Object(i.b)("em",{parentName:"a"},"PostData")),"; space?: ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#spacedata"},Object(i.b)("em",{parentName:"a"},"SpaceData"))," }")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostwithdetailsquery"},"FindPostWithDetailsQuery"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostquery"},Object(i.b)("em",{parentName:"a"},"FindPostQuery"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postdetailsopts"},Object(i.b)("em",{parentName:"a"},"PostDetailsOpts"),"   "))),Object(i.b)("h2",{id:"find-and-load-an-array-of-posts"},"Find and load an array of posts"),Object(i.b)("h3",{id:"findpostswithalldetails"},"findPostsWithAllDetails"),Object(i.b)("p",null,"findPostsWithAllDetails returns post, space and owner (profile) information."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findPostsWithAllDetails(query: FindPostsQuery): Promise<PostWithAllDetails[]>\n")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ids")," - An array of ids of desired structs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for visible state of the structs (\nsee ",Object(i.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withContentOnly?")," - Boolean.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostsquery"},"FindPostsQuery"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findstructs"},Object(i.b)("em",{parentName:"a"},"FindStructs"))," < ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},Object(i.b)("em",{parentName:"a"},"AnyPostId"))," >")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(i.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(i.b)("em",{parentName:"a"},"PostWithSpace")))),Object(i.b)("p",null,"\ud83d\udc47 ",Object(i.b)("strong",{parentName:"p"},"There are also methods with ready-made visibility filters.")),Object(i.b)("h3",{id:"findpublicpostswithalldetails"},"findPublicPostsWithAllDetails"),Object(i.b)("p",null,"Find and load posts that have ",Object(i.b)("inlineCode",{parentName:"p"},"hidden == false")," field in Substrate struct and their IPFS content is\nnot empty with their extension and owner's profile and space (if defined)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findPublicPostsWithAllDetails(ids: AnyPostId[]): Promise<PostWithAllDetails[]>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(i.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(i.b)("em",{parentName:"a"},"PostWithSpace")))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(i.b)("em",{parentName:"a"},"PostId"))," | ",Object(i.b)("em",{parentName:"p"},"BN"))),Object(i.b)("h3",{id:"findunlistedpostswithalldetails"},"findUnlistedPostsWithAllDetails"),Object(i.b)("p",null,"Find and load posts that have ",Object(i.b)("inlineCode",{parentName:"p"},"hidden == true")," field in Substrate struct and their IPFS content is\nnot empty with their extension and owner's profile and space (if defined)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findUnlistedPostsWithAllDetails(ids: AnyPostId[]): Promise<PostWithAllDetails[]>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithalldetails"},"PostWithAllDetails"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithowner"},Object(i.b)("em",{parentName:"a"},"PostWithOwner"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithspace"},Object(i.b)("em",{parentName:"a"},"PostWithSpace")))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(i.b)("em",{parentName:"a"},"PostId"))," | ",Object(i.b)("em",{parentName:"p"},"BN"))),Object(i.b)("h3",{id:"findpublicpostswithsomedetails"},"findPublicPostsWithSomeDetails"),Object(i.b)("p",null,"Load an array of information about public posts with space and/or owner."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"flatApi.findPublicPostsWithSomeDetails(query: FindPostsWithDetailsQuery): Promise<PostWithSomeDetails[]\n")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ids")," - An array of ids of desired structs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"visibility")," - Filter for visible state of the structs (\nsee ",Object(i.b)("a",{parentName:"li",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#visibility"},"Visibility"),")."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withContentOnly?")," - Boolean."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withSpace?")," - Pass ",Object(i.b)("inlineCode",{parentName:"li"},"true")," to get space data."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withOwner?")," - Pass ",Object(i.b)("inlineCode",{parentName:"li"},"true")," to get profile data.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostswithdetailsquery"},"FindPostsWithDetailsQuery"),": ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#findpostsquery"},Object(i.b)("em",{parentName:"a"}," FindPostsQuery"))," & ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#postdetailsopts"},Object(i.b)("em",{parentName:"a"},"PostDetailsOpts")))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},"PostWithSomeDetails"),": { ext?: ",Object(i.b)("em",{parentName:"p"},"Exclude"),"<",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postwithsomedetails"},Object(i.b)("em",{parentName:"a"},"PostWithSomeDetails")),', "ext">; owner?: ',Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#profiledata"},Object(i.b)("em",{parentName:"a"},"ProfileData")),"; post: ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#postdata"},Object(i.b)("em",{parentName:"a"},"PostData")),"; space?: ",Object(i.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules/dto.html#spacedata"},Object(i.b)("em",{parentName:"a"},"SpaceData"))," }")))}c.isMDXComponent=!0}}]);