(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{158:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),d=r,f=l["".concat(i,".").concat(d)]||l[d]||b[d]||a;return n?o.a.createElement(f,c(c({ref:t},p),{},{components:n})):o.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(158)),i={id:"connection",title:"How To Connect To Subsocial"},c={unversionedId:"sdk/quick-start/connection",id:"sdk/quick-start/connection",isDocsHomePage:!1,title:"How To Connect To Subsocial",description:"You can connect to subsocial using @subsocial/api libraries.",source:"@site/docs/sdk/quick-start/\u0421onnectionToSubsocial.md",slug:"/sdk/quick-start/connection",permalink:"/docs/sdk/quick-start/connection",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/sdk/quick-start/\u0421onnectionToSubsocial.md",version:"current",sidebar:"someSidebar",previous:{title:"Intro",permalink:"/docs/sdk/quick-start/intro"},next:{title:"Transactions",permalink:"/docs/sdk/quick-start/transactions"}},s=[{value:"getSubstrateApi()",id:"getsubstrateapi",children:[]},{value:"FlatSubsocialApi",id:"flatsubsocialapi",children:[]}],p={toc:s};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"You can connect to subsocial using ",Object(a.b)("inlineCode",{parentName:"p"},"@subsocial/api")," libraries."),Object(a.b)("h2",{id:"getsubstrateapi"},"getSubstrateApi()"),Object(a.b)("p",null,"getSubstrateApi() is a polkadot.js ",Object(a.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/create"},"ApiPromise")," that provides a connection to a blockchain RPC node,\nretrieves data from the chain and executes transactions on the chain."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { getSubstrateApi } from '@subsocial/api'\n\nconst api = getSubstrateApi({ endpoint: substrateUrl })\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api"},"Learn more in the documentation"))),Object(a.b)("h2",{id:"flatsubsocialapi"},"FlatSubsocialApi"),Object(a.b)("p",null,"Connect using FlatSubsocialApi."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { newFlatSubsocialApi } from '@subsocial/api'\n\nconst initSubsocialApi = async () => {\n  \n    const api = await newFlatSubsocialApi({\n      substrateNodeUrl, // Substrate node URL e.g. http://127.0.0.1:9944\n      offchainUrl,      // Offchain URL e.g. http://127.0.0.1:3001\n      ipfsNodeUrl       // IPFS node URL e.g. http://127.0.0.1:8080\n    })\n  \n    return api\n}\n\n// connect to subsocial  \nconst flatApi = initSubsocialApi()\n")))}u.isMDXComponent=!0}}]);