"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[9804],{5788:(e,t,a)=>{a.d(t,{Iu:()=>p,yg:()=>g});var i=a(1504);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=i.createContext({}),s=function(e){var t=i.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),y=n,g=d["".concat(c,".").concat(y)]||d[y]||u[y]||r;return a?i.createElement(g,o(o({ref:t},p),{},{components:a})):i.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=y;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}y.displayName="MDXCreateElement"},3804:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=a(5072),n=(a(1504),a(5788));const r={id:"activities",title:"Activities",displayed_sidebar:"developSidebar"},o=void 0,l={unversionedId:"develop/concepts/synthetic/activities",id:"develop/concepts/synthetic/activities",title:"Activities",description:"Activities includes all social activities that you do in Subsocial chain. It unifies all the events that occur on chain to one single query.",source:"@site/docs/develop/concepts/synthetic/activities.md",sourceDirName:"develop/concepts/synthetic",slug:"/develop/concepts/synthetic/activities",permalink:"/docs/develop/concepts/synthetic/activities",draft:!1,editUrl:"https://github.com/dappforce/subsocial-docs/tree/main/docs/develop/concepts/synthetic/activities.md",tags:[],version:"current",frontMatter:{id:"activities",title:"Activities",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"What are Synthetic Concepts?",permalink:"/docs/develop/concepts/synthetic/overview"},next:{title:"Feeds",permalink:"/docs/develop/concepts/synthetic/feeds"}},c={},s=[{value:"Common Attributes",id:"common-attributes",level:3},{value:"Optional Attributes",id:"optional-attributes",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.yg)(d,(0,i.c)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Activities includes all social activities that you do in Subsocial chain. It unifies all the events that occur on chain to one single query.\nIt supports events listed below:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Post - Created, Deleted, Updated, Shared, Moved"),(0,n.yg)("li",{parentName:"ol"},"PostReaction - Created, Updated, Deleted"),(0,n.yg)("li",{parentName:"ol"},"Space - Created, Updated, Followed, Unfollowed, OwnershipTransferAccepted"),(0,n.yg)("li",{parentName:"ol"},"Account - Followed, Unfollowed"),(0,n.yg)("li",{parentName:"ol"},"Profile - Updated"),(0,n.yg)("li",{parentName:"ol"},"Comment - Created, Deleted, Updated, Shared"),(0,n.yg)("li",{parentName:"ol"},"CommentReaction - Created, Updated, Deleted"),(0,n.yg)("li",{parentName:"ol"},"CommentReply - Created, Deleted, Updated, Shared"),(0,n.yg)("li",{parentName:"ol"},"CommentReplyReaction - Created, Updated, Deleted"),(0,n.yg)("li",{parentName:"ol"},"UserName - Registered, Updated")),(0,n.yg)("p",null,"You can filter or differentiate activities based on their events, where they are enums which corresponds to the event name. For example, ",(0,n.yg)("inlineCode",{parentName:"p"},"PostCreated"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"PostUpdated"),", etc."),(0,n.yg)("h3",{id:"common-attributes"},"Common Attributes"),(0,n.yg)("p",null,"Common attributes that every activity has are listed as below:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"id"),(0,n.yg)("li",{parentName:"ul"},"account"),(0,n.yg)("li",{parentName:"ul"},"blockNumber"),(0,n.yg)("li",{parentName:"ul"},"eventIndex"),(0,n.yg)("li",{parentName:"ul"},"event"),(0,n.yg)("li",{parentName:"ul"},"date"),(0,n.yg)("li",{parentName:"ul"},"aggregated"),(0,n.yg)("li",{parentName:"ul"},"aggCount")),(0,n.yg)("p",null,"Similar activities are grouped together and aggregated. The ",(0,n.yg)("inlineCode",{parentName:"p"},"aggregated")," attribute is a boolean value that indicates whether the activity is aggregated or not. The ",(0,n.yg)("inlineCode",{parentName:"p"},"aggCount")," attribute is the number of similar activities. Examples of similar activities mentioned before are when account A and B likes your post Z, or when account A and B follows your account. Those activities are considered similar activities the latest activity for that group will have the ",(0,n.yg)("inlineCode",{parentName:"p"},"aggregated")," value to ",(0,n.yg)("inlineCode",{parentName:"p"},"true")," with the ",(0,n.yg)("inlineCode",{parentName:"p"},"aggCount")," corresponds to how many similar activities prior to the latest activity."),(0,n.yg)("p",null,"For example, in the case where 2 accounts like your post Z:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Account A likes your post Z - It will create 1 new activity, where the ",(0,n.yg)("inlineCode",{parentName:"li"},"aggregated")," value is ",(0,n.yg)("inlineCode",{parentName:"li"},"true")," and ",(0,n.yg)("inlineCode",{parentName:"li"},"aggCount")," is 0."),(0,n.yg)("li",{parentName:"ol"},"Account B likes your post Z - It will create 1 new activity, where the ",(0,n.yg)("inlineCode",{parentName:"li"},"aggregated")," value is ",(0,n.yg)("inlineCode",{parentName:"li"},"true")," and ",(0,n.yg)("inlineCode",{parentName:"li"},"aggCount")," is 1. And all the previous activity in that group will be updated with the ",(0,n.yg)("inlineCode",{parentName:"li"},"aggregated")," value to ",(0,n.yg)("inlineCode",{parentName:"li"},"false"),".")),(0,n.yg)("h3",{id:"optional-attributes"},"Optional Attributes"),(0,n.yg)("p",null,"Whereas listed below are the optional attributes which only filled if the attribute is related to the event:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"followingAccount"),(0,n.yg)("li",{parentName:"ul"},"space"),(0,n.yg)("li",{parentName:"ul"},"spacePrev"),(0,n.yg)("li",{parentName:"ul"},"newOwner"),(0,n.yg)("li",{parentName:"ul"},"oldOwner"),(0,n.yg)("li",{parentName:"ul"},"post"),(0,n.yg)("li",{parentName:"ul"},"reaction"),(0,n.yg)("li",{parentName:"ul"},"username")))}u.isMDXComponent=!0}}]);