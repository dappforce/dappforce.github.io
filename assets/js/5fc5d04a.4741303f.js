(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{103:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var o=n(3),a=n(7),c=(n(0),n(159)),r={id:"fetch-reactions",title:"Fetch Reactions",displayed_sidebar:"developSidebar"},s={unversionedId:"develop/how-to-guides/reactions/fetch-reactions",id:"develop/how-to-guides/reactions/fetch-reactions",isDocsHomePage:!1,title:"Fetch Reactions",description:"This section covers how to fetch reactions on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/reactions/FetchReactions.md",slug:"/develop/how-to-guides/reactions/fetch-reactions",permalink:"/docs/develop/how-to-guides/reactions/fetch-reactions",editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/reactions/FetchReactions.md",version:"current",sidebar:"developSidebar",previous:{title:"Create And Update Comments",permalink:"/docs/develop/how-to-guides/comments/create-comments"},next:{title:"Create, Update, And Delete Reactions",permalink:"/docs/develop/how-to-guides/reactions/create-reactions"}},i=[{value:"Get reaction IDs",id:"get-reaction-ids",children:[]},{value:"Get reactions",id:"get-reactions",children:[{value:"Example",id:"example",children:[]}]},{value:"Get a reaction by post ID and account",id:"get-a-reaction-by-post-id-and-account",children:[]}],p={toc:i};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"This section covers how to fetch reactions on the Subsocial blockchain.")),Object(c.b)("p",null,"Find and load an array of information about reactions from the Subsocial blockchain by a given array of IDs."),Object(c.b)("h2",{id:"get-reaction-ids"},"Get reaction IDs"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"query")," allows for the querying of multiple storage entries and the combination into a single result.\nThis is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription."),Object(c.b)("h2",{id:"get-reactions"},"Get reactions"),Object(c.b)("p",null,"Get reactions (upvotes/downvotes) on posts or comments by reaction IDs (use multi request from blockchain)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"substrateApi.findReactions(ids: AnyReactionId[]): Promise<Reaction[]>\nsubstrateApi.findReaction(id: AnyReactionId): Promise<Reaction | undefined>\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(c.b)("em",{parentName:"a"},"ReactionId"))," | ",Object(c.b)("em",{parentName:"p"},"BN"))),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"Reaction"))),Object(c.b)("h3",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"import { ReactionId } from '@subsocial/types/substrate/interfaces';\n  \nconst myAccount = '3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8';\n\nconst example = async () =>  {\n  const substrate = await flatApi.subsocial.substrate\n  const substrateApi = await flatApi.subsocial.substrate.api\n  \n  const tuples = [ '1', '2', '3' ].map(postId => [ myAccount, postId ])\n  \n  const reactionIds = await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n  const reactions = await substrate.findReactions(reactionIds as ReactionId[])\n}\n")),Object(c.b)("h2",{id:"get-a-reaction-by-post-id-and-account"},"Get a reaction by post ID and account"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"substrateApi.getPostReactionIdByAccount(accountId: AnyAccountId, postId: AnyPostId): Promise<ReactionId | undefined>\n")),Object(c.b)("p",null,"Example: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"flatApi.substrate.getPostReactionIdByAccount('3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8', '1')\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(c.b)("em",{parentName:"a"},"ReactionId"))," | ",Object(c.b)("em",{parentName:"p"},"BN"))),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83c\udd83 ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},Object(c.b)("em",{parentName:"a"},"PostId"))," | ",Object(c.b)("em",{parentName:"p"},"BN"))),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83c\udd78 ",Object(c.b)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},Object(c.b)("em",{parentName:"a"},"ReactionId")))))}b.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=b(n),u=o,m=l["".concat(r,".").concat(u)]||l[u]||d[u]||c;return n?a.a.createElement(m,s(s({ref:t},p),{},{components:n})):a.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,r=new Array(c);r[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<c;p++)r[p]=n[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);