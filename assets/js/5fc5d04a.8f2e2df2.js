"use strict";(self.webpackChunksubsocial_docs=self.webpackChunksubsocial_docs||[]).push([[34],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(i,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(k,c(c({ref:t},l),{},{components:n})):o.createElement(k,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var p=2;p<r;p++)c[p]=n[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(3117),a=(n(7294),n(3905));const r={id:"fetch-reactions",title:"Fetch Reactions",displayed_sidebar:"developSidebar"},c=void 0,s={unversionedId:"develop/how-to-guides/reactions/fetch-reactions",id:"develop/how-to-guides/reactions/fetch-reactions",title:"Fetch Reactions",description:"This section covers how to fetch reactions on the Subsocial blockchain.",source:"@site/docs/develop/how-to-guides/reactions/FetchReactions.md",sourceDirName:"develop/how-to-guides/reactions",slug:"/develop/how-to-guides/reactions/fetch-reactions",permalink:"/docs/develop/how-to-guides/reactions/fetch-reactions",draft:!1,editUrl:"https://github.com/dappforce/dappforce.github.io/docs/develop/how-to-guides/reactions/FetchReactions.md",tags:[],version:"current",frontMatter:{id:"fetch-reactions",title:"Fetch Reactions",displayed_sidebar:"developSidebar"},sidebar:"developSidebar",previous:{title:"Create And Update Comments",permalink:"/docs/develop/how-to-guides/comments/create-comments"},next:{title:"Create, Update, And Delete Reactions",permalink:"/docs/develop/how-to-guides/reactions/create-reactions"}},i={},p=[{value:"Get reaction IDs",id:"get-reaction-ids",level:2},{value:"Get reactions",id:"get-reactions",level:2},{value:"Example",id:"example",level:3},{value:"Get a reaction by post ID and account",id:"get-a-reaction-by-post-id-and-account",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This section covers how to fetch reactions on the Subsocial blockchain.")),(0,a.kt)("p",null,"Find and load an array of information about reactions from the Subsocial blockchain by a given array of IDs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const substrateApi = await api.substrateApi\n")),(0,a.kt)("h2",{id:"get-reaction-ids"},"Get reaction IDs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"query")," allows for the querying of multiple storage entries and the combination into a single result.\nThis is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription."),(0,a.kt)("h2",{id:"get-reactions"},"Get reactions"),(0,a.kt)("p",null,"Get reactions (upvotes/downvotes) on posts or comments by reaction IDs (use multi request from blockchain)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"api.blockchain.findReactions(ids: AnyReactionId[]): Promise<Reaction[]>\napi.blockchain.findReaction(id: AnyReactionId): Promise<Reaction | undefined>\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd83 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},(0,a.kt)("em",{parentName:"a"},"ReactionId"))," | ",(0,a.kt)("em",{parentName:"p"},"BN"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd78 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reaction.html"},"Reaction"))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ReactionId } from '@subsocial/api/types/substrate';\n  \nconst myAccount = '3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8';\n\nconst example = async () =>  {\n  const substrate = await api.blockchain\n  const substrateApi = await api.substrateApi\n  \n  const tuples = [ '1', '2', '3' ].map(postId => [ myAccount, postId ])\n  \n  const reactionIds = await substrateApi.query.reactions.postReactionIdByAccount.multi(tuples)\n  const reactions = await substrate.findReactions(reactionIds as ReactionId[])\n}\n")),(0,a.kt)("h2",{id:"get-a-reaction-by-post-id-and-account"},"Get a reaction by post ID and account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"api.blockchain.getPostReactionIdByAccount(accountId: AnyAccountId, postId: AnyPostId): Promise<ReactionId | undefined>\n")),(0,a.kt)("p",null,"Example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"api.blockchain.getPostReactionIdByAccount('3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8', '1')\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd83 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anyreactionid"},"AnyReactionId"),": ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},(0,a.kt)("em",{parentName:"a"},"ReactionId"))," | ",(0,a.kt)("em",{parentName:"p"},"BN"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd83 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/modules.html#anypostid"},"AnyPostId"),": ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.postid.html"},(0,a.kt)("em",{parentName:"a"},"PostId"))," | ",(0,a.kt)("em",{parentName:"p"},"BN"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83c\udd78 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.subsocial.network/js-docs/js-sdk/interfaces/interfaces.reactionid.html"},(0,a.kt)("em",{parentName:"a"},"ReactionId")))))}d.isMDXComponent=!0}}]);